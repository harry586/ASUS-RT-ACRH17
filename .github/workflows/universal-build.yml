name: "Universal Firmware Builder"

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      source_branch:
        description: '源码分支 (auto=自动推荐稳定分支，或指定 main/master 等)'
        required: true
        default: 'auto'
        type: string
      config_profile:
        description: '设备配置文件路径'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      build_optimization:
        description: '编译优化策略'
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: 'balanced'
      toolchain_strategy:
        description: '工具链策略'
        required: true
        type: choice
        options:
          - prebuilt
          - local
          - auto
        default: 'auto'
      enable_custom_features:
        description: '启用自定义功能'
        required: false
        default: true
        type: boolean

env:
  TZ: "Asia/Shanghai"
  SOURCE_DIR: "/tmp/source"
  ARTIFACTS_DIR: "/tmp/artifacts"
  CCACHE_DIR: "/tmp/ccache"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    
    steps:
    - name: "📥 检出配置仓库"
      uses: actions/checkout@v4
      with:
        path: firmware-config

    - name: "💾 系统资源分析"
      run: |
        echo "=== 系统资源分析 ==="
        df -h
        echo "CPU 核心数: $(nproc)"
        free -h

    - name: "🔧 设置工作环境"
      run: |
        echo "设置编译环境..."
        sudo mkdir -p ${{ env.SOURCE_DIR }}
        sudo mkdir -p ${{ env.ARTIFACTS_DIR }}
        sudo mkdir -p ${{ env.CCACHE_DIR }}
        sudo chown -R $USER:$USER ${{ env.SOURCE_DIR }}
        sudo chown -R $USER:$USER ${{ env.ARTIFACTS_DIR }}
        sudo chown -R $USER:$USER ${{ env.CCACHE_DIR }}
        
        echo "🔄 创建交换文件..."
        sudo dd if=/dev/zero of=/swapfile bs=1M count=4096
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        
        echo "⚡ 优化系统设置..."
        ulimit -n 65536
        export FORCE_UNSAFE_CONFIGURE=1

    - name: "🔍 验证配置文件"
      run: |
        echo "=== 验证配置文件 ==="
        if [ ! -f "firmware-config/repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          echo "请创建 firmware-config/repositories.json 文件，内容示例:"
          cat << 'EOF'
          {
            "repositories": {
              "immortalwrt": {
                "url": "https://github.com/immortalwrt/immortalwrt",
                "description": "ImmortalWrt 功能丰富",
                "recommended_branch": "openwrt-21.02"
              },
              "openwrt": {
                "url": "https://github.com/openwrt/openwrt",
                "description": "OpenWrt 官方纯净",
                "recommended_branch": "main"
              },
              "lede": {
                "url": "https://github.com/coolsnowwolf/lede",
                "description": "LEDE 集成度高", 
                "recommended_branch": "master"
              }
            }
          }
          EOF
          exit 1
        fi
        
        echo "✅ repositories.json 存在"
        cat firmware-config/repositories.json

    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        echo "正在解析源码配置..."
        
        PRESET="${{ github.event.inputs.source_preset }}"
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // \"未知\"" firmware-config/repositories.json)
        
        if [ -z "$SOURCE_URL" ]; then
          echo "❌ 错误: 未找到预设 $PRESET 的源码URL"
          echo "可用的预设:"
          jq -r '.repositories | keys[]' firmware-config/repositories.json
          exit 1
        fi
        
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)
        fi
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "SOURCE_PRESET=$PRESET" >> $GITHUB_ENV
        echo "✅ 源码配置: $PRESET - $DESCRIPTION, 分支: $BRANCH"

    - name: "🛠️ 安装编译依赖"
      run: |
        echo "安装完整编译依赖包..."
        sudo apt-get update
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip \
          python3-setuptools rsync unzip zlib1g-dev file wget jq ccache \
          m4 help2man texinfo texi2html libtool-bin automake autoconf \
          pkg-config subversion mercurial curl cmake ninja-build libelf-dev \
          libssl-dev zlib1g-dev libc6-dev
        
        echo "✅ 依赖安装完成"

    - name: "⚡ 设置编译缓存"
      run: |
        echo "设置CCache..."
        ccache -M 4G
        ccache -o compression=true
        echo "CCACHE_DIR=${{ env.CCACHE_DIR }}" >> $GITHUB_ENV
        echo "✅ 缓存设置完成"

    - name: "📥 获取源代码（支持 main/master 分支）"
      id: clone-source
      run: |
        echo "正在克隆源码仓库..."
        cd ${{ env.SOURCE_DIR }}
        
        REQUESTED_BRANCH="${{ env.SOURCE_BRANCH }}"
        echo "请求的分支: $REQUESTED_BRANCH"
        
        # 尝试克隆指定分支
        if git clone --depth 1 --branch "$REQUESTED_BRANCH" "${{ env.SOURCE_URL }}" . 2>/dev/null; then
          echo "✅ 使用指定分支克隆成功: $REQUESTED_BRANCH"
          ACTUAL_BRANCH="$REQUESTED_BRANCH"
        else
          echo "⚠️ 指定分支 $REQUESTED_BRANCH 失败，尝试自动检测分支..."
          
          # 先克隆仓库但不检出分支
          git clone --depth 1 "${{ env.SOURCE_URL }}" .
          
          # 尝试常见分支名称
          COMMON_BRANCHES="main master openwrt-23.05 openwrt-22.03 openwrt-21.02 immortalwrt-21.02 lede-17.01"
          for branch in $COMMON_BRANCHES; do
            if git checkout "$branch" 2>/dev/null; then
              echo "✅ 使用自动检测分支: $branch"
              ACTUAL_BRANCH="$branch"
              break
            fi
          done
          
          # 如果常见分支都不存在，使用远程默认分支
          if [ -z "$ACTUAL_BRANCH" ]; then
            DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d" " -f5)
            if [ -n "$DEFAULT_BRANCH" ] && git checkout "$DEFAULT_BRANCH" 2>/dev/null; then
              echo "✅ 使用默认分支: $DEFAULT_BRANCH"
              ACTUAL_BRANCH="$DEFAULT_BRANCH"
            else
              # 最后尝试任何可用的分支
              FIRST_BRANCH=$(git branch -r | head -1 | sed 's|origin/||' | tr -d ' ')
              if [ -n "$FIRST_BRANCH" ] && git checkout "$FIRST_BRANCH" 2>/dev/null; then
                echo "✅ 使用第一个可用分支: $FIRST_BRANCH"
                ACTUAL_BRANCH="$FIRST_BRANCH"
              fi
            fi
          fi
        fi
        
        if [ -z "$ACTUAL_BRANCH" ]; then
          echo "❌ 无法找到合适的分支，克隆失败"
          exit 1
        fi
        
        echo "ACTUAL_BRANCH=$ACTUAL_BRANCH" >> $GITHUB_ENV
        echo "✅ 源码克隆完成，实际分支: $ACTUAL_BRANCH"

    - name: "🔄 源码初始化与依赖"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "开始源码初始化..."
        
        # 确保 feeds 配置存在
        if [ ! -f "feeds.conf" ] && [ -f "feeds.conf.default" ]; then
          cp feeds.conf.default feeds.conf
        fi
        
        echo "更新 feeds..."
        ./scripts/feeds update -a || {
          echo "⚠️ Feeds更新失败，尝试修复..."
          ./scripts/feeds clean
          ./scripts/feeds update -a
        }
        
        echo "安装 feeds..."
        ./scripts/feeds install -a || echo "⚠️ 部分feeds安装失败，但继续编译"
        
        echo "✅ 源码初始化完成"

    - name: "🎨 应用设备配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        CONFIG_FILE="firmware-config/${{ github.event.inputs.config_profile }}"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 配置文件不存在: $CONFIG_FILE"
          echo "可用的配置文件:"
          find firmware-config/configs -name ".config_*" 2>/dev/null | head -10 || echo "无配置文件"
          exit 1
        fi
        
        cp "$CONFIG_FILE" .config
        echo "✅ 配置应用完成: $(basename $CONFIG_FILE)"

    - name: "🔧 配置优化"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "应用编译优化..."
        
        # 启用ccache
        echo "CONFIG_CCACHE=y" >> .config
        
        # 根据优化策略调整
        case "${{ github.event.inputs.build_optimization }}" in
          "speed")
            echo "🚀 应用极速优化"
            ;;
          "stability")  
            echo "🛡️ 应用稳定优化"
            echo "CONFIG_DEBUG_INFO=n" >> .config
            ;;
          *)
            echo "⚖️ 应用平衡优化"
            ;;
        esac
        
        # 自动处理配置依赖
        yes "" | make oldconfig >/dev/null 2>&1 || true
        echo "✅ 配置优化完成"

    - name: "🛠️ 编译工具链"
      timeout-minutes: 90
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "开始编译工具链..."
        
        # 编译host工具
        make tools/compile -j$(nproc) || make tools/compile -j1
        
        # 编译工具链
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1
        
        echo "✅ 工具链编译完成"

    - name: "📦 处理自定义功能"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "处理自定义功能..."
        
        # 预编译IPK包
        IPK_DIR="firmware-config/custom-features/prebuilt-ipks"
        if [ -d "$IPK_DIR" ]; then
          mkdir -p package/base-files/files/usr/lib/opkg/custom
          find "$IPK_DIR" -name "*.ipk" -exec cp {} package/base-files/files/usr/lib/opkg/custom/ \;
          echo "✅ IPK包处理完成"
        fi
        
        # 自定义脚本
        SCRIPTS_DIR="firmware-config/custom-features/scripts"
        if [ -d "$SCRIPTS_DIR" ]; then
          for script in $(find "$SCRIPTS_DIR" -name "*.sh" | sort); do
            echo "执行脚本: $(basename $script)"
            chmod +x "$script"
            timeout 300 bash "$script" || echo "⚠️ 脚本执行失败但继续"
          done
        fi

    - name: "🔍 预创建目录结构"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "预创建编译目录..."
        
        # 创建通用目录结构
        mkdir -p build_dir/target-*/root-*/{tmp,etc,usr,lib,bin,sbin,var,proc,dev}
        mkdir -p build_dir/target-*/root.orig-*/{tmp,etc,usr,lib,bin,sbin,var,proc,dev}
        mkdir -p staging_dir/target-*/root-*/{tmp,etc,usr,lib,bin,sbin,var,proc,dev}
        
        # 设置tmp目录权限
        find build_dir staging_dir -name "tmp" -type d -exec chmod 1777 {} \; 2>/dev/null || true
        
        echo "✅ 目录结构预创建完成"

    - name: "🏗️ 编译固件"
      timeout-minutes: 180
      id: compile
      run: |
        cd ${{ env.SOURCE_DIR }}
        export FORCE_UNSAFE_CONFIGURE=1
        
        echo "开始编译固件..."
        echo "优化策略: ${{ github.event.inputs.build_optimization }}"
        echo "工具链: ${{ github.event.inputs.toolchain_strategy }}"
        
        CPU_CORES=$(nproc)
        
        case "${{ github.event.inputs.build_optimization }}" in
          "speed")
            echo "🚀 极速模式编译..."
            make -j$CPU_CORES
            ;;
          "stability")
            echo "🛡️ 稳定模式编译..."
            make -j1 V=s
            ;;
          *)
            echo "⚖️ 平衡模式编译..."
            make -j$((CPU_CORES / 2)) V=s
            ;;
        esac
        
        if [ $? -eq 0 ]; then
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          echo "🎉 编译成功完成!"
        else
          echo "BUILD_STATUS=failed" >> $GITHUB_ENV
          echo "❌ 编译失败"
          exit 1
        fi

    - name: "📦 收集构建产物"
      if: env.BUILD_STATUS == 'success'
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "收集编译产物..."
        
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        
        # 复制固件文件
        find bin/targets -type f \( -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" \) \
          -exec cp --parents {} ${{ env.ARTIFACTS_DIR }}/ \; 2>/dev/null || true
        
        # 复制配置文件
        cp .config ${{ env.ARTIFACTS_DIR }}/ 2>/dev/null || true
        
        # 生成构建报告
        {
          echo "=== 固件构建报告 ==="
          echo "构建时间: $(date)"
          echo "源码库: ${{ env.SOURCE_PRESET }}"
          echo "源码分支: ${{ env.ACTUAL_BRANCH }}"
          echo "配置文件: ${{ github.event.inputs.config_profile }}"
          echo "优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "工具链策略: ${{ github.event.inputs.toolchain_strategy }}"
          echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}"
          echo "构建状态: ${{ env.BUILD_STATUS }}"
        } > ${{ env.ARTIFACTS_DIR }}/build-report.txt
        
        # 复制到工作区
        mkdir -p $GITHUB_WORKSPACE/artifacts
        cp -r ${{ env.ARTIFACTS_DIR }}/* $GITHUB_WORKSPACE/artifacts/ 2>/dev/null || true
        
        echo "✅ 产物收集完成"

    - name: "💾 上传构建产物"
      if: env.BUILD_STATUS == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}-${{ env.SOURCE_PRESET }}-${{ env.ACTUAL_BRANCH }}"
        path: artifacts
        retention-days: 7

    - name: "🧹 清理环境"
      if: always()
      run: |
        echo "清理编译环境..."
        sudo swapoff /swapfile 2>/dev/null || true
        sudo rm -f /swapfile 2>/dev/null || true
        sudo rm -rf ${{ env.SOURCE_DIR }} 2>/dev/null || true
        sudo rm -rf ${{ env.ARTIFACTS_DIR }} 2>/dev/null || true
        echo "✅ 环境清理完成"

    - name: "📊 构建报告"
      if: always()
      run: |
        echo "=== 构建报告 ==="
        echo "工作流: ${{ github.workflow }}"
        echo "运行ID: ${{ github.run_id }}"
        echo "源码库: ${{ env.SOURCE_PRESET }}"
        echo "分支: ${{ env.ACTUAL_BRANCH }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        echo "状态: ${{ env.BUILD_STATUS || 'unknown' }}"
        
        if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
          echo "🎉 构建成功！产物已上传到 Artifacts"
        else
          echo "❌ 构建失败，请检查日志"
        fi
