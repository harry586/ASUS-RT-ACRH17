name: Universal Firmware Builder - Enhanced & Fixed

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: 选择源码库
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: immortalwrt
      source_branch:
        description: 源码分支 (auto=自动推荐稳定分支，或指定 main/master 等)
        required: true
        default: auto
        type: string
      config_profile:
        description: 设备配置文件路径
        required: true
        type: string
        default: .config_rt-ac42u_immortalwrt
      build_optimization:
        description: 编译优化策略
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: balanced
      toolchain_strategy:
        description: 工具链策略
        required: true
        type: choice
        options:
          - prebuilt
          - local
          - auto
        default: auto
      enable_custom_features:
        description: 启用自定义功能
        required: false
        default: true
        type: boolean

env:
  TZ: Asia/Shanghai
  SOURCE_DIR: /mnt/source
  ARTIFACTS_DIR: /mnt/artifacts
  CCACHE_DIR: /mnt/ccache
  BUILD_LOG_DIR: /mnt/build-logs
  TOOLCHAIN_LOG_DIR: /mnt/toolchain-logs

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: 📥 检出配置仓库
        uses: actions/checkout@v4
        with:
          path: .  # 直接检出到当前目录

      - name: 💾 智能系统资源分析
        timeout-minutes: 2
        run: |
          echo "=== 智能系统资源分析 ==="
          echo "📊 磁盘空间:"
          df -h
          echo ""
          echo "💻 CPU 信息:"
          echo "核心数: $(nproc)"
          echo "架构: $(uname -m)"
          echo "CPU 型号: $(grep 'model name' /proc/cpuinfo | head -1 | cut -d: -f2 | sed 's/^ *//')"
          echo ""
          echo "🧠 内存信息:"
          free -h
          echo ""
          echo "📁 关键目录状态:"
          for dir in /tmp /mnt /home/runner /opt /var /usr; do
            if [ -d "$dir" ]; then
              mount_point=$(df "$dir" 2>/dev/null | awk 'NR==2 {print $6}')
              usage=$(df -h "$dir" 2>/dev/null | awk 'NR==2 {print $5}')
              available=$(df -h "$dir" 2>/dev/null | awk 'NR==2 {print $4}')
              echo "  $dir: 挂载点=$mount_point, 使用率=$usage, 可用=$available"
            else
              echo "  $dir: 目录不存在"
            fi
          done
          echo ""
          echo "🔄 交换空间: $(swapon --show | wc -l 2>/dev/null || echo 0) 个交换文件"
          echo ""
          echo "✅ 资源分析完成 - 系统就绪"

      - name: 🔧 全面工作环境设置
        run: |
          echo "设置全面编译环境..."
          
          # 清理根分区空间
          echo "🧹 清理根分区临时空间..."
          sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # 在 /mnt 创建所有必要目录
          echo "📁 在 /mnt 创建目录结构..."
          sudo mkdir -p ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          
          # 设置所有权和权限
          echo "🔒 设置目录权限..."
          sudo chown -R $USER:$USER ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          sudo chmod -R 755 ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }}
          sudo chmod -R 777 ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          
          # 验证目录创建
          echo "🔍 验证目录创建..."
          for dir in ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}; do
            if [ -d "$dir" ]; then
              echo "✅ $dir: 创建成功"
              # 显示目录所在分区的空间
              dir_df=$(df -h "$dir" | awk 'NR==2')
              echo "   所在分区: $dir_df"
            else
              echo "❌ $dir: 创建失败"
              exit 1
            fi
          done
          
          # 修复交换文件创建问题
          echo "🔄 在 /mnt 创建高性能交换文件..."
          # 首先检查并清理任何现有的交换文件
          if [ -f /mnt/swapfile ]; then
            echo "🔍 发现现有交换文件，正在清理..."
            sudo swapoff /mnt/swapfile 2>/dev/null || true
            sudo rm -f /mnt/swapfile 2>/dev/null || true
            sleep 2  # 等待系统释放资源
          fi
          
          # 检查是否有进程占用交换文件
          echo "🔍 检查交换文件占用情况..."
          if sudo lsof /mnt/swapfile 2>/dev/null; then
            echo "⚠️ 有进程占用交换文件，等待释放..."
            sleep 5
            sudo lsof /mnt/swapfile 2>/dev/null && echo "❌ 仍有进程占用，强制清理" || echo "✅ 已释放"
          fi
          
          # 确保文件被完全删除
          sudo rm -f /mnt/swapfile
          
          # 创建新的交换文件
          echo "📝 创建新的交换文件..."
          sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192 status=progress
          if [ $? -ne 0 ]; then
            echo "❌ 交换文件创建失败，尝试备用方法..."
            # 备用方法：使用 fallocate
            sudo fallocate -l 8G /mnt/swapfile
            if [ $? -ne 0 ]; then
              echo "⚠️ fallocate 失败，尝试 truncate..."
              sudo truncate -s 8G /mnt/swapfile
            fi
          fi
          
          # 设置权限和启用交换
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          
          echo "📊 交换空间状态:"
          sudo swapon --show
          free -h
          
          echo "⚡ 优化系统性能设置..."
          ulimit -n 65536
          # 忽略sysctl权限错误，这些不是关键设置
          sudo sysctl -w vm.swappiness=60 2>/dev/null || echo "⚠️ 无法设置swappiness（非关键错误）"
          sudo sysctl -w vm.vfs_cache_pressure=50 2>/dev/null || echo "⚠️ 无法设置vfs_cache_pressure（非关键错误）"
          
          echo "🔧 设置环境变量..."
          export FORCE_UNSAFE_CONFIGURE=1
          export TERM=xterm-256color
          
          # 显示设置后的空间状态
          echo ""
          echo "📊 设置后磁盘空间状态:"
          df -h

      - name: 🔍 智能文件发现
        id: file-discovery
        run: |
          echo "=== 智能文件发现 ==="
          echo "🔍 分析仓库结构..."
          
          # 修复find命令的管道问题
          set +o pipefail
          
          # 查找 repositories.json
          echo ""
          echo "📋 查找 repositories.json 文件..."
          REPO_JSON_FOUND=$(find . -name "repositories.json" -type f 2>/dev/null | head -1 || true)
          if [ -n "$REPO_JSON_FOUND" ]; then
            echo "✅ 找到 repositories.json: $REPO_JSON_FOUND"
            echo "REPO_JSON_PATH=$REPO_JSON_FOUND" >> $GITHUB_ENV
          else
            echo "❌ 未找到 repositories.json 文件"
            echo "当前目录结构:"
            find . -type f -name "*.json" 2>/dev/null | head -10 || echo "无JSON文件"
            exit 1
          fi
          
          # 查找所有可能的配置文件
          echo ""
          echo "📋 查找所有配置文件..."
          CONFIG_FILES=$(find . -name ".config_*" -type f 2>/dev/null || true)
          if [ -n "$CONFIG_FILES" ]; then
            echo "✅ 找到以下配置文件:"
            echo "$CONFIG_FILES"
            echo "CONFIG_FILES_FOUND=true" >> $GITHUB_ENV
          else
            echo "⚠️ 未找到 .config_* 文件"
            echo "CONFIG_FILES_FOUND=false" >> $GITHUB_ENV
          fi
          
          # 修复自定义功能目录查找 - 根据您的目录结构
          echo ""
          echo "📋 查找自定义功能目录..."
          # 查找 firmware-config/custom-features 目录
          CUSTOM_FEATURES_DIR=$(find . -type d -path "*/firmware-config/custom-features" 2>/dev/null | head -1 || true)
          if [ -n "$CUSTOM_FEATURES_DIR" ]; then
            echo "✅ 找到自定义功能目录: $CUSTOM_FEATURES_DIR"
            echo "CUSTOM_FEATURES_DIR=$CUSTOM_FEATURES_DIR" >> $GITHUB_ENV
            
            # 检查IPK和脚本目录
            echo "🔍 检查自定义功能子目录..."
            if [ -d "$CUSTOM_FEATURES_DIR/prebuilt-ipks" ]; then
              IPK_COUNT=$(find "$CUSTOM_FEATURES_DIR/prebuilt-ipks" -name "*.ipk" -type f 2>/dev/null | wc -l)
              echo "✅ 找到IPK目录，包含 $IPK_COUNT 个IPK文件"
            else
              echo "⚠️ 未找到 prebuilt-ipks 目录"
            fi
            
            if [ -d "$CUSTOM_FEATURES_DIR/scripts" ]; then
              SCRIPT_COUNT=$(find "$CUSTOM_FEATURES_DIR/scripts" -name "*.sh" -type f 2>/dev/null | wc -l)
              echo "✅ 找到脚本目录，包含 $SCRIPT_COUNT 个脚本文件"
            else
              echo "⚠️ 未找到 scripts 目录"
            fi
          else
            echo "ℹ️ 未找到自定义功能目录"
            echo "CUSTOM_FEATURES_DIR=" >> $GITHUB_ENV
          fi
          
          echo ""
          echo "📁 完整目录结构 (前20个文件):"
          find . -type f 2>/dev/null | head -20 || echo "目录结构显示完成"
          
          set -o pipefail

      - name: 🔧 智能源码配置解析
        id: source-config
        run: |
          echo "正在智能解析源码配置..."
          
          PRESET="${{ github.event.inputs.source_preset }}"
          echo "使用的预设: $PRESET"
          
          # 使用找到的JSON文件路径
          REPO_JSON_PATH="${{ env.REPO_JSON_PATH }}"
          
          # 验证预设有效性
          if ! jq -e ".repositories.$PRESET" "$REPO_JSON_PATH" >/dev/null 2>&1; then
            echo "❌ 错误: 预设 '$PRESET' 不存在"
            echo "可用的预设:"
            jq -r '.repositories | keys[]' "$REPO_JSON_PATH"
            exit 1
          fi
          
          # 获取源码配置
          SOURCE_URL=$(jq -r ".repositories.$PRESET.url" "$REPO_JSON_PATH")
          DESCRIPTION=$(jq -r ".repositories.$PRESET.description // \"未知\"" "$REPO_JSON_PATH")
          RECOMMENDED_BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch" "$REPO_JSON_PATH")
          
          echo "✅ 成功获取配置信息"
          
          BRANCH="${{ github.event.inputs.source_branch }}"
          if [ "$BRANCH" = "auto" ]; then
            BRANCH="$RECOMMENDED_BRANCH"
            echo "🤖 自动选择推荐分支: $BRANCH"
          else
            echo "📋 使用指定分支: $BRANCH"
          fi
          
          # 设置环境变量
          echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SOURCE_PRESET=$PRESET" >> $GITHUB_ENV
          echo "RECOMMENDED_BRANCH=$RECOMMENDED_BRANCH" >> $GITHUB_ENV
          
          echo ""
          echo "✅ 源码配置解析完成"
          echo "📊 配置详情:"
          echo "  - 预设: $PRESET"
          echo "  - 描述: $DESCRIPTION"
          echo "  - 仓库: $SOURCE_URL"
          echo "  - 分支: $BRANCH"
          echo "  - 推荐分支: $RECOMMENDED_BRANCH"

      - name: 🛠️ 全面编译依赖安装与验证
        run: |
          echo "安装全面编译依赖包..."
          sudo apt-get update
          
          # 分类安装依赖包
          echo "📦 安装基础编译工具..."
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib
          
          echo "📦 安装开发库..."
          sudo apt-get install -y gettext git libncurses5-dev libssl-dev python3 python3-pip python3-setuptools
          
          echo "📦 安装工具链依赖..."
          sudo apt-get install -y rsync unzip zlib1g-dev file wget jq ccache m4 help2man texinfo texi2html
          
          echo "📦 安装构建工具..."
          sudo apt-get install -y libtool-bin automake autoconf pkg-config subversion mercurial curl cmake ninja-build
          
          echo "📦 安装系统库..."
          sudo apt-get install -y libelf-dev libssl-dev zlib1g-dev libc6-dev libxml2-dev liblzma-dev liblzo2-dev
          
          echo "🔍 依赖安装验证..."
          
          # 验证关键工具
          echo "=== 关键工具验证 ==="
          for tool in gcc g++ make flex bison git curl wget; do
            if command -v $tool >/dev/null 2>&1; then
              version=$($tool --version 2>/dev/null | head -1 | cut -d' ' -f1-4 | tr -d '\n' || echo "可用")
              echo "✅ $tool: $version"
            else
              echo "❌ $tool: 未安装"
              exit 1
            fi
          done
          
          echo "✅ 所有依赖安装和验证完成"

      - name: ⚡ 高级缓存与性能优化
        run: |
          echo "设置高级缓存与性能优化..."
          
          # CCache配置 - 现在在 /mnt 分区
          mkdir -p ${{ env.CCACHE_DIR }}
          ccache -M 16G  # 增加缓存大小，因为 /mnt 有足够空间
          ccache -o compression=true
          ccache -o compression_level=6
          ccache -o max_files=200000
          ccache -o sloppiness=file_macro,include_file_mtime,include_file_ctime,time_macros
          
          echo "CCACHE_DIR=${{ env.CCACHE_DIR }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=16G" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros" >> $GITHUB_ENV
          
          echo "📊 初始CCache统计:"
          ccache -s
          
          # 系统优化
          echo "🔧 系统性能优化..."
          echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf 2>/dev/null || echo "⚠️ 无法设置sysctl配置（非关键）"
          echo "vm.vfs_cache_pressure=50" | sudo tee -a /etc/sysctl.conf 2>/dev/null || echo "⚠️ 无法设置sysctl配置（非关键）"
          sudo sysctl -p 2>/dev/null || echo "⚠️ 无法应用sysctl配置（非关键）"
          
          echo "✅ 缓存与性能优化完成"

      - name: 📥 智能源码获取与验证
        id: clone-source
        run: |
          echo "开始智能源码获取..."
          cd ${{ env.SOURCE_DIR }}
          
          REQUESTED_BRANCH="${{ env.SOURCE_BRANCH }}"
          echo "🎯 请求分支: $REQUESTED_BRANCH"
          echo "🎯 源码仓库: ${{ env.SOURCE_URL }}"
          
          # 定义克隆策略 - 修复分支查找逻辑，包括 main 和 master
          CLONE_STRATEGIES=(
            "指定分支: git clone --depth 1 --branch $REQUESTED_BRANCH ${{ env.SOURCE_URL }} ."
            "main分支: git clone --depth 1 --branch main ${{ env.SOURCE_URL }} ."
            "master分支: git clone --depth 1 --branch master ${{ env.SOURCE_URL }} ."
            "默认分支: git clone --depth 1 ${{ env.SOURCE_URL }} ."
          )
          
          CLONE_SUCCESS=false
          CLONE_ERROR=""
          
          for strategy in "${CLONE_STRATEGIES[@]}"; do
            strategy_name=$(echo "$strategy" | cut -d: -f1)
            clone_cmd=$(echo "$strategy" | cut -d: -f2-)
            
            echo ""
            echo "🔧 尝试策略: $strategy_name"
            echo "命令: $clone_cmd"
            
            # 清理目录
            rm -rf .[!.]* * 2>/dev/null || true
            
            # 执行克隆命令
            if eval $clone_cmd 2>&1 | tee ${{ env.BUILD_LOG_DIR }}/clone.log; then
              # 验证克隆是否真的成功
              if [ -d ".git" ]; then
                ACTUAL_BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
                echo "✅ 克隆成功: $strategy_name"
                echo "📋 实际分支: $ACTUAL_BRANCH"
                CLONE_SUCCESS=true
                break
              else
                CLONE_ERROR="Git目录未创建"
                echo "⚠️ Git目录未创建，继续尝试其他策略..."
              fi
            else
              CLONE_ERROR="克隆命令执行失败"
              echo "❌ 策略失败: $strategy_name"
              # 显示克隆错误详情
              if [ -f "${{ env.BUILD_LOG_DIR }}/clone.log" ]; then
                echo "克隆错误详情:"
                tail -20 ${{ env.BUILD_LOG_DIR }}/clone.log
              fi
            fi
          done
          
          if [ "$CLONE_SUCCESS" = "false" ]; then
            echo "❌ 所有克隆策略都失败"
            echo "🔍 最后尝试的克隆日志:"
            cat ${{ env.BUILD_LOG_DIR }}/clone.log 2>/dev/null || echo "无克隆日志"
            echo "错误: $CLONE_ERROR"
            exit 1
          fi
          
          echo "ACTUAL_BRANCH=$ACTUAL_BRANCH" >> $GITHUB_ENV
          
          # 源码验证
          echo ""
          echo "🔍 源码仓库验证..."
          echo "📁 源码目录结构:"
          ls -la | head -10
          echo ""
          echo "📊 仓库信息:"
          git log --oneline -3 2>/dev/null || echo "无法获取提交历史"
          echo ""
          echo "🌿 分支信息:"
          git branch -a 2>/dev/null | head -5 || echo "无法获取分支信息"
          
          echo ""
          echo "✅ 源码获取与验证完成"

      - name: 💾 源码获取后空间监测
        run: |
          echo "=== 源码获取后空间监测 ==="
          echo "📊 当前磁盘使用情况:"
          df -h

          # 检查关键分区的可用空间
          ROOT_AVAILABLE=$(df / | awk 'NR==2 {gsub("G","",$4); print int($4)}')
          MNT_AVAILABLE=$(df /mnt | awk 'NR==2 {gsub("G","",$4); print int($4)}')
          
          echo "根分区可用空间: ${ROOT_AVAILABLE}GB"
          echo "/mnt 分区可用空间: ${MNT_AVAILABLE}GB"

          if [ "$ROOT_AVAILABLE" -lt 2 ]; then
            echo "🚨 严重警告: 根分区空间不足2GB，可能影响系统稳定性"
          fi

          if [ "$MNT_AVAILABLE" -lt 10 ]; then
            echo "🚨 严重错误: /mnt 分区空间不足10GB，无法编译"
            exit 1
          elif [ "$MNT_AVAILABLE" -lt 20 ]; then
            echo "⚠️ 警告: /mnt 分区空间紧张 (${MNT_AVAILABLE}GB)"
          else
            echo "✅ /mnt 分区空间充足"
          fi

      - name: 🔄 智能源码初始化
        timeout-minutes: 45
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始智能源码初始化..."
          START_TIME=$(date +%s)
          
          # Feeds配置检测与修复
          echo "🔧 Feeds配置检测..."
          if [ -f "feeds.conf" ]; then
            echo "📋 使用现有 feeds.conf"
          elif [ -f "feeds.conf.default" ]; then
            echo "📋 使用 feeds.conf.default"
            cp feeds.conf.default feeds.conf
          else
            echo "⚠️ 未找到feeds配置，创建默认配置"
            echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf
            echo "src-git luci https://git.openwrt.org/feed/luci.git" >> feeds.conf
            echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf
            echo "src-git telephony https://git.openwrt.org/feed/telephony.git" >> feeds.conf
          fi
          
          # Feeds更新（带重试机制）
          echo "🔄 更新Feeds..."
          for i in 1 2 3; do
            echo "尝试 $i/3"
            if ./scripts/feeds update -a; then
              echo "✅ Feeds更新成功"
              break
            else
              echo "❌ Feeds更新失败，尝试修复..."
              if [ $i -eq 3 ]; then
                echo "🔍 Feeds更新失败分析:"
                tail -50 ${{ env.BUILD_LOG_DIR }}/feeds-update.log 2>/dev/null || echo "无详细日志"
                exit 1
              fi
              sleep 5
            fi
          done
          
          # Feeds安装
          echo "📦 安装Feeds..."
          if ! ./scripts/feeds install -a; then
            echo "⚠️ 完整安装失败，尝试基础安装..."
            ./scripts/feeds install -a -p packages
            ./scripts/feeds install -a -p luci
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "⏱️ Feeds初始化耗时: ${DURATION}秒"
          echo "✅ 源码初始化完成"

      - name: 🎨 配置应用与验证
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "应用设备配置..."
          
          CONFIG_FILE="${{ github.event.inputs.config_profile }}"
          echo "正在查找配置文件: $CONFIG_FILE"
          
          # 智能查找配置文件 - 修复查找逻辑
          echo "🔍 智能查找配置文件..."
          
          # 首先检查当前目录和上级目录
          echo "📁 检查当前目录结构:"
          pwd
          ls -la
          echo ""
          echo "📁 检查上级目录结构:"
          ls -la ../
          
          # 定义所有可能的查找路径
          CONFIG_PATHS=(
            "../$CONFIG_FILE"
            "../../$CONFIG_FILE"
            "$GITHUB_WORKSPACE/$CONFIG_FILE"
            "$CONFIG_FILE"
            "../firmware-config/configs/$CONFIG_FILE"
            "$GITHUB_WORKSPACE/firmware-config/configs/$CONFIG_FILE"
          )
          
          CONFIG_FOUND=""
          
          # 首先尝试精确匹配输入的文件名
          echo "🔍 尝试精确匹配..."
          for path in "${CONFIG_PATHS[@]}"; do
            echo "检查路径: $path"
            if [ -f "$path" ]; then
              CONFIG_FOUND="$path"
              echo "✅ 找到配置文件: $path"
              break
            fi
          done
          
          # 如果没有找到，尝试在所有位置查找任何 .config_* 文件
          if [ -z "$CONFIG_FOUND" ]; then
            echo "🔍 未找到精确匹配，搜索所有 .config_* 文件..."
            ALL_CONFIG_FILES=$(find $GITHUB_WORKSPACE .. -name ".config_*" -type f 2>/dev/null | head -10 || true)
            
            if [ -n "$ALL_CONFIG_FILES" ]; then
              echo "找到以下配置文件:"
              echo "$ALL_CONFIG_FILES"
              
              # 尝试匹配文件名
              CONFIG_BASENAME=$(basename "$CONFIG_FILE")
              MATCHED_FILE=$(echo "$ALL_CONFIG_FILES" | grep -F "$CONFIG_BASENAME" | head -1 || true)
              
              if [ -n "$MATCHED_FILE" ]; then
                CONFIG_FOUND="$MATCHED_FILE"
                echo "✅ 找到匹配的配置文件: $MATCHED_FILE"
              else
                # 使用第一个找到的配置文件
                FIRST_CONFIG=$(echo "$ALL_CONFIG_FILES" | head -1)
                CONFIG_FOUND="$FIRST_CONFIG"
                echo "⚠️ 使用第一个可用的配置文件: $FIRST_CONFIG"
              fi
            fi
          fi
          
          if [ -z "$CONFIG_FOUND" ]; then
            echo "❌ 错误: 无法找到配置文件 '$CONFIG_FILE'"
            echo ""
            echo "当前工作目录: $(pwd)"
            echo ""
            echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
            echo ""
            echo "所有可能的查找路径:"
            for path in "${CONFIG_PATHS[@]}"; do
              echo "  $path"
            done
            echo ""
            echo "所有 .config_* 文件:"
            find $GITHUB_WORKSPACE .. -name ".config_*" -type f 2>/dev/null || echo "无 .config_* 文件"
            echo ""
            echo "所有文件 (前30个):"
            find $GITHUB_WORKSPACE .. -type f 2>/dev/null | head -30 || echo "无文件"
            exit 1
          fi
          
          # 应用配置
          echo "📋 复制配置文件: $CONFIG_FOUND -> .config"
          cp "$CONFIG_FOUND" .config
          echo "✅ 配置应用完成: $(basename $CONFIG_FOUND)"
          
          # 配置验证
          echo "🔍 配置验证..."
          if [ ! -f ".config" ]; then
            echo "❌ 配置文件未正确应用"
            exit 1
          fi
          
          echo "📋 关键配置项:"
          grep -E "CONFIG_TARGET_|CONFIG_BUSYBOX|CONFIG_LINUX" .config | head -10 || echo "无关键配置信息"
          
          # 配置文件完整性检查
          CONFIG_SIZE=$(stat -c%s .config)
          if [ "$CONFIG_SIZE" -lt 100 ]; then
            echo "❌ 配置文件过小，可能损坏"
            exit 1
          fi
          
          echo "✅ 配置验证完成"

      - name: 🔧 高级性能优化配置
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "应用高级性能优化配置..."
          
          # 基础优化
          echo "⚡ 应用基础优化..."
          sed -i 's/CONFIG_DEBUG=y/# CONFIG_DEBUG is not set/' .config 2>/dev/null || true
          sed -i 's/CONFIG_DEVEL=y/# CONFIG_DEVEL is not set/' .config 2>/dev/null || true
          sed -i 's/CONFIG_BUILD_LOG=y/# CONFIG_BUILD_LOG is not set/' .config 2>/dev/null || true
          
          # 启用ccache
          echo "CONFIG_CCACHE=y" >> .config
          
          # 根据优化策略调整
          case "${{ github.event.inputs.build_optimization }}" in
            "speed")
              echo "🚀 应用极速优化配置..."
              echo "CONFIG_DEBUG_INFO=n" >> .config
              ;;
            "stability")
              echo "🛡️ 应用稳定优化配置..."
              echo "CONFIG_SMALL_FLASH=y" >> .config
              ;;
            *)
              echo "⚖️ 应用平衡优化配置..."
              ;;
          esac
          
          # 修复yes命令的管道问题 - 使用更安全的方法
          echo "🔄 运行配置处理..."
          echo "n" | make oldconfig >/dev/null 2>&1 || echo "配置处理完成"
          
          echo "✅ 性能优化配置完成"

      - name: 🛠️ 全面工具链编译与验证
        timeout-minutes: 120
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始全面工具链编译..."
          START_TIME=$(date +%s)
          mkdir -p ${{ env.TOOLCHAIN_LOG_DIR }}
          
          # 清理旧工具链
          echo "🧹 清理旧工具链..."
          rm -rf staging_dir/toolchain-* build_dir/toolchain-* 2>/dev/null || true
          
          # Host工具编译
          echo "🔧 编译Host工具..."
          if ! make tools/compile -j$(($(nproc) - 1)) V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/host-tools.log; then
            echo "❌ Host工具编译失败，尝试单线程..."
            if ! make tools/compile -j1 V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/host-tools-single.log; then
              echo "❌ Host工具编译彻底失败"
              exit 1
            fi
          fi
          
          # Host工具验证
          echo "🔍 Host工具验证..."
          REQUIRED_HOST_TOOLS="m4 flex bison"
          for tool in $REQUIRED_HOST_TOOLS; do
            if [ -f "staging_dir/host/bin/$tool" ]; then
              echo "✅ $tool: 存在"
            else
              echo "❌ $tool: 缺失"
              exit 1
            fi
          done
          
          # 工具链编译
          echo "🔧 编译工具链..."
          if ! make toolchain/compile -j$(($(nproc) - 1)) V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/toolchain-compile.log; then
            echo "❌ 工具链编译失败，尝试单线程..."
            if ! make toolchain/compile -j1 V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/toolchain-compile-single.log; then
              echo "❌ 工具链编译彻底失败"
              exit 1
            fi
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "⏱️ 工具链编译耗时: ${DURATION}秒"
          echo "✅ 工具链编译完成"

      - name: 🔍 深度工具链验证
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "=== 深度工具链验证 ==="
          
          # 目录结构验证
          echo "📁 工具链目录结构:"
          find staging_dir/ -type d -maxdepth 2 2>/dev/null | sort || echo "无法访问staging_dir"
          
          # Host工具详细验证
          echo ""
          echo "🔧 Host工具详细验证:"
          for tool in m4 flex bison; do
            tool_path=$(find staging_dir/host/bin -name "$tool" -type f 2>/dev/null | head -1)
            if [ -n "$tool_path" ] && [ -x "$tool_path" ]; then
              version=$("$tool_path" --version 2>/dev/null | head -1 || echo "可执行")
              echo "✅ $tool: $version"
            else
              echo "❌ $tool: 缺失或不可执行"
              exit 1
            fi
          done
          
          # 目标工具链验证
          echo ""
          echo "🎯 目标工具链验证:"
          TARGET_GCC=$(find staging_dir/toolchain-*/bin/ -name "*gcc" -type f 2>/dev/null | head -1)
          TARGET_STRIP=$(find staging_dir/toolchain-*/bin/ -name "*strip" -type f 2>/dev/null | head -1)
          TARGET_LD=$(find staging_dir/toolchain-*/bin/ -name "*ld" -type f 2>/dev/null | head -1)
          
          if [ -n "$TARGET_GCC" ] && [ -x "$TARGET_GCC" ]; then
            echo "✅ 目标GCC: $TARGET_GCC"
            echo "📋 GCC版本: $($TARGET_GCC --version | head -1)"
          else
            echo "❌ 目标GCC: 缺失或不可执行"
            exit 1
          fi
          
          if [ -n "$TARGET_STRIP" ] && [ -x "$TARGET_STRIP" ]; then
            echo "✅ 目标STRIP: $TARGET_STRIP"
          else
            echo "❌ 目标STRIP: 缺失或不可执行"
          fi
          
          if [ -n "$TARGET_LD" ] && [ -x "$TARGET_LD" ]; then
            echo "✅ 目标LD: $TARGET_LD"
          else
            echo "❌ 目标LD: 缺失或不可执行"
          fi
          
          # 工具链完整性检查
          echo ""
          echo "🔍 工具链完整性检查..."
          TOOLCHAIN_BIN_DIR=$(dirname "$TARGET_GCC" 2>/dev/null)
          if [ -n "$TOOLCHAIN_BIN_DIR" ] && [ -d "$TOOLCHAIN_BIN_DIR" ]; then
            TOOL_COUNT=$(ls "$TOOLCHAIN_BIN_DIR" 2>/dev/null | wc -l || echo 0)
            echo "工具链工具数量: $TOOL_COUNT"
            if [ "$TOOL_COUNT" -lt 10 ]; then
              echo "⚠️ 工具链工具数量过少，可能不完整"
            fi
          fi
          
          echo "✅ 深度工具链验证完成"

      - name: 📦 智能自定义功能处理
        if: github.event.inputs.enable_custom_features == 'true'
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "处理智能自定义功能..."
          
          CUSTOM_FEATURES_DIR="${{ env.CUSTOM_FEATURES_DIR }}"
          
          if [ -n "$CUSTOM_FEATURES_DIR" ]; then
            echo "🔍 使用找到的自定义功能目录: $CUSTOM_FEATURES_DIR"
            
            # 预编译IPK包处理 - 修复路径问题
            IPK_DIR="$CUSTOM_FEATURES_DIR/prebuilt-ipks"
            if [ -d "$IPK_DIR" ]; then
              echo "📦 处理预编译IPK包..."
              IPK_FILES=$(find "$IPK_DIR" -name "*.ipk" -type f 2>/dev/null)
              IPK_COUNT=$(echo "$IPK_FILES" | wc -l)
              
              if [ "$IPK_COUNT" -gt 0 ]; then
                echo "✅ 找到 $IPK_COUNT 个IPK文件:"
                echo "$IPK_FILES"
                
                # 创建目标目录
                mkdir -p package/base-files/files/usr/lib/opkg/custom
                
                # 复制IPK文件
                for ipk in $IPK_FILES; do
                  if [ -f "$ipk" ]; then
                    cp "$ipk" package/base-files/files/usr/lib/opkg/custom/
                    echo "✅ 已复制: $(basename $ipk)"
                  fi
                done
                
                # 验证IPK包
                echo "🔍 验证IPK包..."
                for ipk in package/base-files/files/usr/lib/opkg/custom/*.ipk; do
                  if [ -f "$ipk" ]; then
                    ipk_size=$(stat -c%s "$ipk" 2>/dev/null || echo 0)
                    if [ "$ipk_size" -gt 1000 ]; then
                      echo "✅ $(basename $ipk): 有效 ($ipk_size 字节)"
                    else
                      echo "⚠️ $(basename $ipk): 文件过小，可能损坏"
                    fi
                  fi
                done
              else
                echo "ℹ️ IPK包目录为空"
              fi
            else
              echo "ℹ️ 无IPK包目录: $IPK_DIR"
            fi
            
            # 自定义脚本处理 - 修复路径问题
            SCRIPTS_DIR="$CUSTOM_FEATURES_DIR/scripts"
            if [ -d "$SCRIPTS_DIR" ]; then
              echo "📜 处理自定义脚本..."
              SCRIPT_FILES=$(find "$SCRIPTS_DIR" -name "*.sh" -type f 2>/dev/null)
              SCRIPT_COUNT=$(echo "$SCRIPT_FILES" | wc -l)
              
              if [ "$SCRIPT_COUNT" -gt 0 ]; then
                echo "✅ 找到 $SCRIPT_COUNT 个脚本文件:"
                echo "$SCRIPT_FILES"
                
                for script in $SCRIPT_FILES; do
                  if [ -f "$script" ]; then
                    echo "▶️ 执行脚本: $(basename $script)"
                    chmod +x "$script"
                    # 设置环境变量让脚本知道源码目录
                    export SOURCE_DIR="${{ env.SOURCE_DIR }}"
                    export BUILD_DIR="${{ env.SOURCE_DIR }}/build_dir"
                    export STAGING_DIR="${{ env.SOURCE_DIR }}/staging_dir"
                    
                    if timeout 600 bash "$script"; then
                      echo "✅ 脚本执行成功: $(basename $script)"
                    else
                      EXIT_CODE=$?
                      if [ $EXIT_CODE -eq 124 ]; then
                        echo "⏰ 脚本执行超时: $(basename $script)"
                      else
                        echo "⚠️ 脚本执行失败: $(basename $script) (退出码: $EXIT_CODE)"
                      fi
                    fi
                  fi
                done
              else
                echo "ℹ️ 无脚本文件"
              fi
            else
              echo "ℹ️ 无脚本目录: $SCRIPTS_DIR"
            fi
          else
            echo "ℹ️ 无自定义功能目录，跳过自定义功能处理"
          fi
          
          echo "✅ 自定义功能处理完成"

      - name: 🏗️ 智能编译固件 (修复版)
        timeout-minutes: 240
        id: compile-firmware
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始智能编译固件..."
          export FORCE_UNSAFE_CONFIGURE=1
          export TERM=linux
          
          # 设置编译环境
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros
          
          CPU_CORES=$(nproc)
          mkdir -p ${{ env.BUILD_LOG_DIR }}
          START_TIME=$(date +%s)
          
          echo "📊 编译参数汇总:"
          echo "  - 源码库: ${{ env.SOURCE_PRESET }}"
          echo "  - 实际分支: ${{ env.ACTUAL_BRANCH }}"
          echo "  - 优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "  - 工具链策略: ${{ github.event.inputs.toolchain_strategy }}"
          echo "  - 自定义功能: ${{ github.event.inputs.enable_custom_features }}"
          echo "  - CPU核心: $CPU_CORES"
          echo "  - CCache: 已启用"
          
          # 修复编译方法 - 使用更可靠的方式
          echo "🔧 开始编译..."
          LOG_FILE="${{ env.BUILD_LOG_DIR }}/firmware-compile.log"
          
          {
            set -e
            echo "阶段1: 编译准备..."
            make tools/install 2>/dev/null || true
            make toolchain/install 2>/dev/null || true
            
            echo "阶段2: 编译目标..."
            make -j$CPU_CORES V=s
            
            echo "阶段3: 编译完成验证..."
          } 2>&1 | tee "$LOG_FILE"
          
          # 检查编译结果
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
            echo "🎉 编译成功完成!"
          else
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            echo "❌ 编译失败"
            
            # 错误分析
            echo "=== 详细错误分析 ==="
            if [ -f "$LOG_FILE" ]; then
              echo "关键错误:"
              grep -i "error\|failed\|undefined\|missing\|no such file\|cannot create" "$LOG_FILE" | tail -20 || echo "无明确错误信息"
            fi
            exit 1
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV
          echo "⏱️ 总编译耗时: ${DURATION}秒 ($(($DURATION/60))分钟)"

      - name: 🔍 固件产物验证与收集
        if: env.BUILD_STATUS == 'success'
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "=== 固件产物验证与收集 ==="
          
          # 查找所有可能的固件文件
          echo "🔍 查找固件文件..."
          
          # 多个可能的固件目录
          FIRMWARE_PATHS=(
            "bin/targets"
            "build_dir/target-*/linux-*/tmp"
            "build_dir/target-*/root-*"
          )
          
          TOTAL_FIRMWARE_COUNT=0
          mkdir -p ${{ env.ARTIFACTS_DIR }}/firmware
          
          for path_pattern in "${FIRMWARE_PATHS[@]}"; do
            echo ""
            echo "搜索模式: $path_pattern"
            found_files=$(find . -path "./$path_pattern" -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | head -20 || true)
            
            if [ -n "$found_files" ]; then
              count=$(echo "$found_files" | wc -l)
              echo "✅ 找到 $count 个文件:"
              echo "$found_files"
              
              # 复制文件到产物目录
              for file in $found_files; do
                if [ -f "$file" ]; then
                  file_size=$(stat -c%s "$file" 2>/dev/null || echo 0)
                  if [ "$file_size" -gt 1000000 ]; then  # 大于1MB才认为是有效固件
                    cp --parents "$file" ${{ env.ARTIFACTS_DIR }}/firmware/
                    echo "📦 已收集: $file ($(($file_size/1024/1024))MB)"
                    TOTAL_FIRMWARE_COUNT=$((TOTAL_FIRMWARE_COUNT + 1))
                  else
                    echo "⚠️ 跳过小文件: $file ($file_size 字节)"
                  fi
                fi
              done
            else
              echo "ℹ️ 无匹配文件"
            fi
          done
          
          # 特别检查您日志中提到的固件路径
          echo ""
          echo "🔍 检查特定固件路径..."
          SPECIFIC_FIRMWARE="build_dir/target-arm_cortex-a7+neon-vfpv4_musl_eabi/linux-ipq40xx_generic/tmp/immortalwrt-ipq40xx-generic-asus_rt-ac42u-squashfs-sysupgrade.bin"
          if [ -f "$SPECIFIC_FIRMWARE" ]; then
            echo "✅ 找到特定固件: $SPECIFIC_FIRMWARE"
            cp --parents "$SPECIFIC_FIRMWARE" ${{ env.ARTIFACTS_DIR }}/firmware/
            TOTAL_FIRMWARE_COUNT=$((TOTAL_FIRMWARE_COUNT + 1))
          else
            echo "⚠️ 未找到特定固件"
          fi
          
          # 检查标准输出目录
          echo ""
          echo "🔍 检查标准输出目录..."
          if [ -d "bin/targets" ]; then
            STANDARD_FIRMWARE=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | head -10 || true)
            if [ -n "$STANDARD_FIRMWARE" ]; then
              count=$(echo "$STANDARD_FIRMWARE" | wc -l)
              echo "✅ 标准目录找到 $count 个固件:"
              echo "$STANDARD_FIRMWARE"
              
              # 确保复制所有标准固件
              cp -r bin/targets ${{ env.ARTIFACTS_DIR }}/firmware/ 2>/dev/null || true
            else
              echo "⚠️ 标准目录无固件"
            fi
          fi
          
          echo ""
          echo "📊 固件收集统计:"
          echo "总共收集到 $TOTAL_FIRMWARE_COUNT 个固件文件"
          
          if [ $TOTAL_FIRMWARE_COUNT -eq 0 ]; then
            echo "❌ 错误: 未找到任何固件文件"
            echo "当前目录结构:"
            find . -type f -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | head -20 || echo "无固件文件"
            exit 1
          else
            echo "✅ 固件验证与收集完成"
          fi
          
          echo "FIRMWARE_COUNT=$TOTAL_FIRMWARE_COUNT" >> $GITHUB_ENV

      - name: 📋 收集编译日志和配置
        if: always()
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "收集编译日志和配置..."
          mkdir -p ${{ env.ARTIFACTS_DIR }}/logs
          mkdir -p ${{ env.ARTIFACTS_DIR }}/configs
          
          # 收集日志
          echo "📋 收集编译日志..."
          cp -r ${{ env.BUILD_LOG_DIR }}/* ${{ env.ARTIFACTS_DIR }}/logs/ 2>/dev/null || true
          cp -r ${{ env.TOOLCHAIN_LOG_DIR }}/* ${{ env.ARTIFACTS_DIR }}/logs/ 2>/dev/null || true
          
          # 收集配置
          echo "📋 收集配置文件..."
          cp .config ${{ env.ARTIFACTS_DIR }}/configs/ 2>/dev/null || true
          cp feeds.conf* ${{ env.ARTIFACTS_DIR }}/configs/ 2>/dev/null || true
          
          # 生成构建报告
          echo "📊 生成详细构建报告..."
          {
            echo "=== 详细固件构建报告 ==="
            echo "构建时间: $(date)"
            echo "构建状态: ${{ env.BUILD_STATUS || 'unknown' }}"
            echo "编译时长: ${{ env.BUILD_DURATION || 'N/A' }}秒"
            echo "固件数量: ${{ env.FIRMWARE_COUNT || 0 }}"
            echo ""
            echo "=== 源码信息 ==="
            echo "源码库: ${{ env.SOURCE_PRESET }}"
            echo "请求分支: ${{ env.SOURCE_BRANCH }}"
            echo "实际分支: ${{ env.ACTUAL_BRANCH }}"
            echo "推荐分支: ${{ env.RECOMMENDED_BRANCH }}"
            echo ""
            echo "=== 编译配置 ==="
            echo "配置文件: ${{ github.event.inputs.config_profile }}"
            echo "优化策略: ${{ github.event.inputs.build_optimization }}"
            echo "工具链策略: ${{ github.event.inputs.toolchain_strategy }}"
            echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}"
            echo ""
            echo "=== 系统信息 ==="
            echo "Runner: ${{ runner.os }}"
            echo "CPU核心: $(nproc)"
            echo "内存: $(free -h | awk '/^Mem:/{print $2}')"
            echo "磁盘空间: $(df -h /mnt | awk 'NR==2{print $4}') 可用"
            echo ""
            echo "=== 产物信息 ==="
            if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
              echo "固件文件:"
              find ${{ env.ARTIFACTS_DIR }}/firmware -type f 2>/dev/null | xargs -I {} basename {} 2>/dev/null | sort || echo "无固件文件"
            else
              echo "构建失败，无固件产物"
            fi
          } > ${{ env.ARTIFACTS_DIR }}/build-report.txt
          
          echo "✅ 日志和配置收集完成"

      - name: 💾 上传构建产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Firmware-${{ github.run_number }}-${{ env.SOURCE_PRESET }}-${{ env.ACTUAL_BRANCH }}-${{ env.BUILD_STATUS || 'unknown' }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: 30

      - name: 🧹 编译后智能清理
        if: always()
        run: |
          echo "开始编译后智能清理..."
          
          # 显示清理前状态
          echo "=== 清理前状态 ==="
          df -h
          free -h
          
          # 清理编译临时文件但保留源码
          if [ -d "${{ env.SOURCE_DIR }}" ]; then
            cd ${{ env.SOURCE_DIR }}
            echo "🧹 清理编译临时文件..."
            rm -rf build_dir/* staging_dir/* tmp/* logs/* 2>/dev/null || true
            
            if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
              echo "✅ 编译成功，保留源码目录结构"
              echo "📁 保留的目录:"
              ls -la | head -10
            else
              echo "⚠️ 编译失败，保留更多文件用于调试"
            fi
          fi
          
          # 清理缓存和日志目录
          echo "🧹 清理缓存和日志..."
          rm -rf ${{ env.CCACHE_DIR }}/* 2>/dev/null || true
          rm -rf ${{ env.BUILD_LOG_DIR }}/* ${{ env.TOOLCHAIN_LOG_DIR }}/* 2>/dev/null || true
          
          # 清理交换文件
          echo "🧹 清理交换文件..."
          sudo swapoff /mnt/swapfile 2>/dev/null || true
          sudo rm -f /mnt/swapfile 2>/dev/null || true
          
          # 系统级清理
          echo "🧹 系统级清理..."
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
          
          # 显示清理后状态
          echo ""
          echo "=== 清理后状态 ==="
          df -h
          free -h
          echo "✅ 智能清理完成"

      - name: 📊 最终综合报告
        if: always()
        run: |
          echo "=== 最终综合报告 ==="
          echo "🎯 工作流: ${{ github.workflow }}"
          echo "🆔 运行ID: ${{ github.run_id }}"
          echo "🆔 运行号: ${{ github.run_number }}"
          echo ""
          echo "📦 源码信息:"
          echo "  - 预设: ${{ env.SOURCE_PRESET }}"
          echo "  - 分支: ${{ env.ACTUAL_BRANCH }}"
          echo "  - 推荐: ${{ env.RECOMMENDED_BRANCH }}"
          echo ""
          echo "⚙️ 编译配置:"
          echo "  - 配置文件: ${{ github.event.inputs.config_profile }}"
          echo "  - 优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "  - 工具链: ${{ github.event.inputs.toolchain_strategy }}"
          echo "  - 自定义: ${{ github.event.inputs.enable_custom_features }}"
          echo ""
          echo "📈 构建结果:"
          echo "  - 状态: ${{ env.BUILD_STATUS || 'unknown' }}"
          echo "  - 时长: ${{ env.BUILD_DURATION || 'N/A' }}秒"
          echo "  - 固件数量: ${{ env.FIRMWARE_COUNT || 0 }}"
          echo ""
          if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
            echo "🎉 构建成功！固件已上传到 Artifacts"
            echo "📦 下载 Artifacts 获取编译产物"
            echo "🔧 固件文件在 firmware/ 目录中"
          else
            echo "❌ 构建失败"
            echo "🔍 请查看详细日志分析错误原因"
            echo "📋 检查 Artifacts 中的编译日志"
          fi
