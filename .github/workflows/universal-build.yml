name: Universal Firmware Builder



on:

  workflow_dispatch:

    inputs:

      source_preset:

        description: '选择源码库'

        required: true

        type: choice

        options:

          - immortalwrt

          - openwrt

          - lede

        default: 'immortalwrt'

      

      source_branch:

        description: '源码分支 (auto=自动推荐)'

        required: true

        default: 'auto'

        type: string

        

      config_profile:

        description: '设备配置文件路径'

        required: true

        type: string

        default: 'configs/.config_rt-ac42u_immortalwrt'

      

      enable_custom_features:

        description: '启用自定义功能'

        required: false

        default: true

        type: boolean



env:

  TZ: Asia/Shanghai



jobs:

  build:

    runs-on: ubuntu-22.04

    timeout-minutes: 180

    

    steps:

    - name: Checkout config repository

      uses: actions/checkout@v4



    - name: Parse source configuration

      id: source-config

      run: |

        echo "Checking firmware-config directory..."

        if [ ! -d "firmware-config" ]; then

          echo "Error: firmware-config directory not found"

          exit 1

        fi

        

        echo "Checking repositories.json..."

        if [ ! -f "firmware-config/repositories.json" ]; then

          echo "Error: repositories.json not found"

          exit 1

        fi

        

        PRESET="${{ github.event.inputs.source_preset }}"

        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)

        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" firmware-config/repositories.json)

        

        BRANCH="${{ github.event.inputs.source_branch }}"

        if [ "$BRANCH" = "auto" ]; then

          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)

          echo "Auto-selected branch: $BRANCH"

        fi

        

        if [ -z "$SOURCE_URL" ]; then

          echo "Error: Could not get source URL from repositories.json"

          exit 1

        fi

        

        echo "Source: $PRESET - $DESCRIPTION"

        echo "URL: $SOURCE_URL"

        echo "Branch: $BRANCH"

        

        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV

        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV



    - name: Prepare build environment

      run: |

        sudo apt-get update

        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip python3-serial python3-setuptools rsync unzip zlib1g-dev file wget jq



    - name: Get source code

      run: |

        echo "Cloning source repository: ${{ env.SOURCE_URL }}"

        git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" source



    - name: Initialize source

      run: |

        cd source

        if [ -f "feeds.conf" ] || [ -f "feeds.conf.default" ]; then

          ./scripts/feeds update -a

          ./scripts/feeds install -a

          echo "Feeds updated"

        fi



    - name: Apply custom configuration

      run: |

        cd source

        CONFIG_FILE="../firmware-config/${{ github.event.inputs.config_profile }}"

        echo "Applying config: $CONFIG_FILE"

        

        if [ ! -f "$CONFIG_FILE" ]; then

          echo "Error: Config file not found: $CONFIG_FILE"

          exit 1

        fi

        

        cp "$CONFIG_FILE" .config

        echo "Config applied"



    - name: Execute custom scripts

      if: github.event.inputs.enable_custom_features == 'true'

      run: |

        cd source

        SCRIPTS_DIR="../firmware-config/custom-features/scripts"

        

        if [ ! -d "$SCRIPTS_DIR" ]; then

          echo "Custom scripts directory not found"

          exit 0

        fi

        

        SCRIPTS=$(find "$SCRIPTS_DIR" -name "*.sh" -type f | sort)

        

        if [ -z "$SCRIPTS" ]; then

          echo "No script files found"

          exit 0

        fi

        

        for script in $SCRIPTS; do

          echo "Executing: $(basename "$script")"

          chmod +x "$script"

          bash "$script" || exit 1

        done

        

        echo "All scripts executed"



    - name: Diagnose build environment

      run: |

        cd source

        echo "=== 诊断信息 ==="

        echo "磁盘空间:"

        df -h

        echo "内存信息:"

        free -h

        echo "CPU信息:"

        nproc

        echo "检查配置文件:"

        ls -la .config

        echo "配置文件大小:"

        wc -l .config

        echo "检查feeds状态:"

        ./scripts/feeds list -r | head -20



    - name: Compile firmware (stage by stage)

      timeout-minutes: 180

      run: |

        cd source

        

        # 阶段1: 准备

        echo "=== 阶段1: 准备环境 ==="

        make defconfig

        make tools/install -j$(nproc) || make tools/install -j1 V=s

        

        # 阶段2: 下载

        echo "=== 阶段2: 下载源码 ==="

        make download -j$(nproc) || make download -j1 V=s

        

        # 阶段3: 编译工具链

        echo "=== 阶段3: 编译工具链 ==="

        make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s

        

        # 阶段4: 编译内核

        echo "=== 阶段4: 编译内核 ==="

        make target/compile -j$(nproc) || make target/compile -j1 V=s

        

        # 阶段5: 编译软件包

        echo "=== 阶段5: 编译软件包 ==="

        make package/compile -j$(nproc) || make package/compile -j1 V=s

        

        # 阶段6: 安装软件包

        echo "=== 阶段6: 安装软件包 ==="

        make package/install -j$(nproc) || make package/install -j1 V=s

        

        # 阶段7: 最终构建

        echo "=== 阶段7: 最终构建 ==="

        make target/install -j$(nproc) || make target/install -j1 V=s

        

        # 记录构建时间

        END_TIME=$(date +%s)

        DURATION=$((END_TIME - START_TIME))

        echo "编译完成，耗时: ${DURATION} 秒"

        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV



    - name: Collect build artifacts

      run: |

        cd source

        echo "Collecting build outputs..."

        

        FIRMWARE_FILES=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10)

        if [ -n "$FIRMWARE_FILES" ]; then

          echo "Firmware files found:"

          echo "$FIRMWARE_FILES"

        else

          echo "No standard firmware files found"

          echo "Available files in bin/targets:"

          find bin/targets -type f 2>/dev/null | head -20

        fi

        

        mkdir -p ../artifacts

        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true



        echo "Source: ${{ env.SOURCE_URL }}" > ../artifacts/build-info.txt

        echo "Branch: ${{ env.SOURCE_BRANCH }}" >> ../artifacts/build-info.txt

        echo "Config: ${{ github.event.inputs.config_profile }}" >> ../artifacts/build-info.txt

        echo "Time: $(date)" >> ../artifacts/build-info.txt

        echo "Duration: ${{ env.BUILD_DURATION }} seconds" >> ../artifacts/build-info.txt



    - name: Upload artifacts

      uses: actions/upload-artifact@v4

      with:

        name: Firmware-${{ github.run_number }}

        path: artifacts

        retention-days: 30



    - name: Build report

      if: always()

      run: |

        echo "=== Build Report ==="

        echo "Status: ${{ job.status }}"

        echo "Source: ${{ env.SOURCE_URL }}"

        echo "Config: ${{ github.event.inputs.config_profile }}"

        if [ "${{ job.status }}" = "success" ]; then

          echo "Build successful!"

        else

          echo "Build failed - check compilation logs for details"

        fi
