name: Universal Firmware Builder - Enhanced File Discovery & Multi-Device Support

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: 选择源码库
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: immortalwrt
      source_branch:
        description: 源码分支 (auto=自动推荐稳定分支，或指定 main/master/具体分支名)
        required: true
        default: auto
        type: string
      config_profile:
        description: 设备配置文件路径 (支持通配符如 .config_* 或具体文件名)
        required: true
        type: string
        default: .config_rt-ac42u_immortalwrt
      build_optimization:
        description: 编译优化策略
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: balanced
      toolchain_strategy:
        description: 工具链策略
        required: true
        type: choice
        options:
          - prebuilt
          - local
          - auto
        default: auto
      enable_custom_features:
        description: 启用自定义功能
        required: false
        default: true
        type: boolean

env:
  TZ: Asia/Shanghai
  SOURCE_DIR: /mnt/source
  ARTIFACTS_DIR: /mnt/artifacts
  CCACHE_DIR: /mnt/ccache
  BUILD_LOG_DIR: /mnt/build-logs
  TOOLCHAIN_LOG_DIR: /mnt/toolchain-logs

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: 📥 检出配置仓库
        uses: actions/checkout@v4
        with:
          path: .
          fetch-depth: 0

      - name: 💾 智能系统资源分析
        timeout-minutes: 2
        run: |
          echo "=== 智能系统资源分析 ==="
          echo "📊 磁盘空间:"
          df -h
          echo ""
          echo "💻 CPU 信息:"
          echo "核心数: $(nproc)"
          echo "架构: $(uname -m)"
          echo "CPU 型号: $(grep 'model name' /proc/cpuinfo | head -1 | cut -d: -f2 | sed 's/^ *//')"
          echo ""
          echo "🧠 内存信息:"
          free -h
          echo ""
          echo "🔄 交换空间: $(swapon --show | wc -l 2>/dev/null || echo 0) 个交换文件"
          echo ""
          echo "✅ 资源分析完成 - 系统就绪"

      - name: 🔧 全面工作环境设置
        run: |
          echo "设置全面编译环境..."
          sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null || true
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          sudo mkdir -p ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          sudo chown -R $USER:$USER ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          sudo chmod -R 755 ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }}
          sudo chmod -R 777 ${{ env.CCACHE_DIR }} ${{ env.BUILD_LOG_DIR }} ${{ env.TOOLCHAIN_LOG_DIR }}
          
          echo "🔄 在 /mnt 创建高性能交换文件..."
          if [ -f /mnt/swapfile ]; then
            sudo swapoff /mnt/swapfile 2>/dev/null || true
            sudo rm -f /mnt/swapfile 2>/dev/null || true
            sleep 2
          fi
          sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192 status=progress || sudo fallocate -l 8G /mnt/swapfile || sudo truncate -s 8G /mnt/swapfile
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          echo "📊 交换空间状态:"
          sudo swapon --show
          free -h
          
          echo "⚡ 优化系统性能设置..."
          ulimit -n 65536
          sudo sysctl -w vm.swappiness=60 2>/dev/null || echo "⚠️ 无法设置swappiness"
          sudo sysctl -w vm.vfs_cache_pressure=50 2>/dev/null || echo "⚠️ 无法设置vfs_cache_pressure"
          export FORCE_UNSAFE_CONFIGURE=1
          export TERM=xterm-256color
          echo "📊 设置后磁盘空间状态:"
          df -h

      - name: 🔍 智能文件发现与配置分析
        id: file-discovery
        run: |
          echo "=== 智能文件发现与配置分析 ==="
          echo "🔍 全面分析仓库结构..."
          set +o pipefail
          
          echo "📋 查找 repositories.json 文件..."
          REPO_JSON_FOUND=$(find . -maxdepth 3 -name "repositories.json" -type f 2>/dev/null | head -1)
          if [ -n "$REPO_JSON_FOUND" ]; then
            echo "✅ 找到 repositories.json: $REPO_JSON_FOUND"
            echo "REPO_JSON_PATH=$REPO_JSON_FOUND" >> $GITHUB_ENV
            echo "📊 repositories.json 内容分析:"
            jq -r '.repositories | keys[] as $k | "  - \($k): \(.[$k].description // "无描述")"' "$REPO_JSON_FOUND" 2>/dev/null || echo "无法解析JSON内容"
          else
            echo "❌ 未找到 repositories.json 文件"
            exit 1
          fi
          
          echo "📋 智能查找所有配置文件..."
          CONFIG_PATTERNS=(".config_*" "config_*" "*.config")
          ALL_CONFIG_FILES=""
          for pattern in "${CONFIG_PATTERNS[@]}"; do
            echo "搜索模式: $pattern"
            found_files=$(find . -maxdepth 3 -name "$pattern" -type f 2>/dev/null | head -10)
            if [ -n "$found_files" ]; then
              ALL_CONFIG_FILES="$ALL_CONFIG_FILES"$'\n'"$found_files"
              echo "找到文件:"
              echo "$found_files"
            fi
          done
          
          if [ -n "$ALL_CONFIG_FILES" ]; then
            CONFIG_COUNT=$(echo "$ALL_CONFIG_FILES" | grep -v '^$' | wc -l)
            echo "✅ 总共找到 $CONFIG_COUNT 个配置文件"
            echo "CONFIG_FILES_FOUND=true" >> $GITHUB_ENV
            echo "$ALL_CONFIG_FILES" > ${{ env.BUILD_LOG_DIR }}/all_config_files.txt
          else
            echo "⚠️ 未找到任何配置文件"
            echo "CONFIG_FILES_FOUND=false" >> $GITHUB_ENV
          fi
          
          echo "📋 智能查找自定义功能目录..."
          CUSTOM_DIR_PATTERNS=("custom-features" "custom" "features" "firmware-config")
          CUSTOM_FEATURES_DIR=""
          for pattern in "${CUSTOM_DIR_PATTERNS[@]}"; do
            echo "搜索目录: $pattern"
            found_dir=$(find . -maxdepth 2 -type d -name "$pattern" 2>/dev/null | head -1)
            if [ -n "$found_dir" ]; then
              # 将相对路径转换为绝对路径
              if [[ "$found_dir" == ./* ]]; then
                CUSTOM_FEATURES_DIR="$GITHUB_WORKSPACE/${found_dir#./}"
              else
                CUSTOM_FEATURES_DIR="$GITHUB_WORKSPACE/$found_dir"
              fi
              echo "✅ 找到自定义功能目录: $found_dir (绝对路径: $CUSTOM_FEATURES_DIR)"
              break
            fi
          done
          
          if [ -n "$CUSTOM_FEATURES_DIR" ]; then
            echo "CUSTOM_FEATURES_DIR=$CUSTOM_FEATURES_DIR" >> $GITHUB_ENV
            
            echo "🔍 自定义目录详细分析:"
            echo "📁 目录结构:"
            find "$CUSTOM_FEATURES_DIR" -type f 2>/dev/null | head -20
            
            echo "📦 IPK文件检查:"
            IPK_FILES=$(find "$CUSTOM_FEATURES_DIR" -name "*.ipk" -type f 2>/dev/null)
            IPK_COUNT=$(echo "$IPK_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
            if [ "$IPK_COUNT" -gt 0 ]; then
              echo "✅ 找到 $IPK_COUNT 个IPK文件:"
              echo "$IPK_FILES" | head -10
            else
              echo "ℹ️ 未找到IPK文件"
            fi
            
            echo "📜 脚本文件检查:"
            SCRIPT_FILES=$(find "$CUSTOM_FEATURES_DIR" -name "*.sh" -type f 2>/dev/null)
            SCRIPT_COUNT=$(echo "$SCRIPT_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
            if [ "$SCRIPT_COUNT" -gt 0 ]; then
              echo "✅ 找到 $SCRIPT_COUNT 个脚本文件:"
              echo "$SCRIPT_FILES" | head -10
            else
              echo "ℹ️ 未找到脚本文件"
            fi
            
            echo "🔧 补丁文件检查:"
            PATCH_FILES=$(find "$CUSTOM_FEATURES_DIR" -name "*.patch" -type f 2>/dev/null)
            PATCH_COUNT=$(echo "$PATCH_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
            if [ "$PATCH_COUNT" -gt 0 ]; then
              echo "✅ 找到 $PATCH_COUNT 个补丁文件:"
              echo "$PATCH_FILES" | head -10
            else
              echo "ℹ️ 未找到补丁文件"
            fi
          else
            echo "ℹ️ 未找到自定义功能目录"
            echo "CUSTOM_FEATURES_DIR=" >> $GITHUB_ENV
          fi
          
          echo ""
          echo "📁 完整目录结构分析:"
          echo "顶层目录:"
          ls -la
          echo ""
          echo "关键文件类型统计:"
          echo "  - 配置文件: $(find . -maxdepth 3 -name "*.config" -o -name ".config_*" -o -name "config_*" 2>/dev/null | wc -l)"
          echo "  - 脚本文件: $(find . -maxdepth 3 -name "*.sh" 2>/dev/null | wc -l)"
          echo "  - Makefile: $(find . -maxdepth 3 -name "Makefile" -o -name "*.mk" 2>/dev/null | wc -l)"
          
          set -o pipefail
          echo "✅ 智能文件发现完成"

      - name: 🔧 智能源码配置解析
        id: source-config
        run: |
          echo "正在智能解析源码配置..."
          PRESET="${{ github.event.inputs.source_preset }}"
          echo "使用的预设: $PRESET"
          REPO_JSON_PATH="${{ env.REPO_JSON_PATH }}"
          
          if ! jq -e ".repositories.$PRESET" "$REPO_JSON_PATH" >/dev/null 2>&1; then
            echo "❌ 错误: 预设 '$PRESET' 不存在"
            echo "可用的预设:"
            jq -r '.repositories | keys[]' "$REPO_JSON_PATH"
            exit 1
          fi
          
          SOURCE_URL=$(jq -r ".repositories.$PRESET.url" "$REPO_JSON_PATH")
          DESCRIPTION=$(jq -r ".repositories.$PRESET.description // \"未知\"" "$REPO_JSON_PATH")
          RECOMMENDED_BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch" "$REPO_JSON_PATH")
          echo "✅ 成功获取配置信息"
          
          BRANCH="${{ github.event.inputs.source_branch }}"
          if [ "$BRANCH" = "auto" ]; then
            BRANCH="$RECOMMENDED_BRANCH"
            echo "🤖 自动选择推荐分支: $BRANCH"
          else
            echo "📋 使用指定分支: $BRANCH"
          fi
          
          echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SOURCE_PRESET=$PRESET" >> $GITHUB_ENV
          echo "RECOMMENDED_BRANCH=$RECOMMENDED_BRANCH" >> $GITHUB_ENV
          
          echo ""
          echo "✅ 源码配置解析完成"
          echo "📊 配置详情:"
          echo "  - 预设: $PRESET"
          echo "  - 描述: $DESCRIPTION"
          echo "  - 仓库: $SOURCE_URL"
          echo "  - 分支: $BRANCH"
          echo "  - 推荐分支: $RECOMMENDED_BRANCH"

      - name: 🛠️ 全面编译依赖安装与验证
        run: |
          echo "安装全面编译依赖包..."
          sudo apt-get update
          echo "📦 安装基础编译工具..."
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib
          echo "📦 安装开发库..."
          sudo apt-get install -y gettext git libncurses5-dev libssl-dev python3 python3-pip python3-setuptools
          echo "📦 安装工具链依赖..."
          sudo apt-get install -y rsync unzip zlib1g-dev file wget jq ccache m4 help2man texinfo texi2html
          echo "📦 安装构建工具..."
          sudo apt-get install -y libtool-bin automake autoconf pkg-config subversion mercurial curl cmake ninja-build
          echo "📦 安装系统库..."
          sudo apt-get install -y libelf-dev libssl-dev zlib1g-dev libc6-dev libxml2-dev liblzma-dev liblzo2-dev
          echo "🔍 依赖安装验证..."
          echo "=== 关键工具验证 ==="
          for tool in gcc g++ make flex bison git curl wget; do
            if command -v $tool >/dev/null 2>&1; then
              version=$($tool --version 2>/dev/null | head -1 | cut -d' ' -f1-4 | tr -d '\n' || echo "可用")
              echo "✅ $tool: $version"
            else
              echo "❌ $tool: 未安装"
              exit 1
            fi
          done
          echo "✅ 所有依赖安装和验证完成"

      - name: ⚡ 高级缓存与性能优化
        run: |
          echo "设置高级缓存与性能优化..."
          mkdir -p ${{ env.CCACHE_DIR }}
          ccache -M 16G
          ccache -o compression=true
          ccache -o compression_level=6
          ccache -o max_files=200000
          ccache -o sloppiness=file_macro,include_file_mtime,include_file_ctime,time_macros
          echo "CCACHE_DIR=${{ env.CCACHE_DIR }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=16G" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros" >> $GITHUB_ENV
          echo "📊 初始CCache统计:"
          ccache -s
          echo "✅ 缓存与性能优化完成"

      - name: 📥 智能源码获取与分支处理
        id: clone-source
        run: |
          echo "开始智能源码获取与分支处理..."
          cd ${{ env.SOURCE_DIR }}
          REQUESTED_BRANCH="${{ env.SOURCE_BRANCH }}"
          SOURCE_URL="${{ env.SOURCE_URL }}"
          echo "🎯 请求分支: $REQUESTED_BRANCH"
          echo "🎯 源码仓库: $SOURCE_URL"
          
          CLONE_STRATEGIES=()
          if [ "$REQUESTED_BRANCH" != "auto" ] && [ "$REQUESTED_BRANCH" != "main" ] && [ "$REQUESTED_BRANCH" != "master" ]; then
            CLONE_STRATEGIES+=("指定分支: git clone --depth 1 --branch $REQUESTED_BRANCH $SOURCE_URL .")
          fi
          CLONE_STRATEGIES+=("main分支: git clone --depth 1 --branch main $SOURCE_URL ." "master分支: git clone --depth 1 --branch master $SOURCE_URL ." "默认分支: git clone --depth 1 $SOURCE_URL .")
          
          if [ "$REQUESTED_BRANCH" = "auto" ]; then
            RECOMMENDED_BRANCH="${{ env.RECOMMENDED_BRANCH }}"
            if [ -n "$RECOMMENDED_BRANCH" ] && [ "$RECOMMENDED_BRANCH" != "null" ]; then
              CLONE_STRATEGIES=("推荐分支: git clone --depth 1 --branch $RECOMMENDED_BRANCH $SOURCE_URL ." "${CLONE_STRATEGIES[@]}")
            fi
          fi
          
          CLONE_SUCCESS=false
          CLONE_ERROR=""
          ACTUAL_BRANCH=""
          
          for strategy in "${CLONE_STRATEGIES[@]}"; do
            strategy_name=$(echo "$strategy" | cut -d: -f1)
            clone_cmd=$(echo "$strategy" | cut -d: -f2-)
            echo ""
            echo "🔄 尝试策略: $strategy_name"
            echo "命令: $clone_cmd"
            rm -rf .[!.]* * 2>/dev/null || true
            
            if eval $clone_cmd 2>&1 | tee ${{ env.BUILD_LOG_DIR }}/clone.log; then
              if [ -d ".git" ]; then
                ACTUAL_BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
                COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                echo "✅ 克隆成功: $strategy_name"
                echo "📋 实际分支: $ACTUAL_BRANCH"
                echo "🔗 提交哈希: $COMMIT_HASH"
                CLONE_SUCCESS=true
                break
              else
                CLONE_ERROR="Git目录未创建"
                echo "⚠️ Git目录未创建，继续尝试其他策略..."
              fi
            else
              CLONE_ERROR="克隆命令执行失败"
              echo "❌ 策略失败: $strategy_name"
              if [ -f "${{ env.BUILD_LOG_DIR }}/clone.log" ]; then
                echo "克隆错误详情:"
                tail -20 ${{ env.BUILD_LOG_DIR }}/clone.log
              fi
            fi
          done
          
          if [ "$CLONE_SUCCESS" = "false" ]; then
            echo "❌ 所有克隆策略都失败"
            echo "🔍 最后尝试的克隆日志:"
            cat ${{ env.BUILD_LOG_DIR }}/clone.log 2>/dev/null || echo "无克隆日志"
            echo "错误: $CLONE_ERROR"
            exit 1
          fi
          
          echo "ACTUAL_BRANCH=$ACTUAL_BRANCH" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          
          echo ""
          echo "🔍 源码仓库深度验证..."
          echo "📁 源码目录结构:"
          ls -la | head -10
          echo ""
          echo "✅ 源码获取与验证完成"

      - name: 💾 源码获取后空间监测
        run: |
          echo "=== 源码获取后空间监测 ==="
          echo "📊 当前磁盘使用情况:"
          df -h
          ROOT_AVAILABLE=$(df / | awk 'NR==2 {gsub("G","",$4); print int($4)}')
          MNT_AVAILABLE=$(df /mnt | awk 'NR==2 {gsub("G","",$4); print int($4)}')
          echo "根分区可用空间: ${ROOT_AVAILABLE}GB"
          echo "/mnt 分区可用空间: ${MNT_AVAILABLE}GB"
          if [ "$ROOT_AVAILABLE" -lt 2 ]; then
            echo "🚨 严重警告: 根分区空间不足2GB，可能影响系统稳定性"
          fi
          if [ "$MNT_AVAILABLE" -lt 10 ]; then
            echo "🚨 严重错误: /mnt 分区空间不足10GB，无法编译"
            exit 1
          elif [ "$MNT_AVAILABLE" -lt 20 ]; then
            echo "⚠️ 警告: /mnt 分区空间紧张 (${MNT_AVAILABLE}GB)"
          else
            echo "✅ /mnt 分区空间充足"
          fi

      - name: 🔄 智能源码初始化
        timeout-minutes: 30
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始智能源码初始化..."
          START_TIME=$(date +%s)
          
          echo "🔧 Feeds配置检测..."
          FEEDS_CONF_FOUND=""
          for feeds_file in feeds.conf feeds.conf.default .feeds.conf .feeds.conf.default; do
            if [ -f "$feeds_file" ]; then
              FEEDS_CONF_FOUND="$feeds_file"
              echo "📋 使用现有 $feeds_file"
              if [ "$feeds_file" != "feeds.conf" ]; then
                cp "$feeds_file" feeds.conf
              fi
              break
            fi
          done
          
          if [ -z "$FEEDS_CONF_FOUND" ]; then
            echo "⚠️ 未找到feeds配置，创建通用配置"
            echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf
            echo "src-git luci https://git.openwrt.org/feed/luci.git" >> feeds.conf
            echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf
            echo "src-git telephony https://git.openwrt.org/feed/telephony.git" >> feeds.conf
          fi
          
          echo "🔄 更新Feeds..."
          for i in 1 2 3; do
            echo "尝试 $i/3"
            if ./scripts/feeds update -a; then
              echo "✅ Feeds更新成功"
              break
            else
              echo "❌ Feeds更新失败，尝试修复..."
              if [ $i -eq 3 ]; then
                echo "❌ Feeds更新彻底失败"
                exit 1
              fi
              sleep 5
            fi
          done
          
          echo "📦 安装基础Feeds..."
          for feed in packages luci routing telephony; do
            if ./scripts/feeds install -a -p $feed; then
              echo "✅ $feed 安装成功"
            else
              echo "⚠️ $feed 安装失败"
            fi
          done
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "⏱️ Feeds初始化耗时: ${DURATION}秒"
          echo "✅ 源码初始化完成"

      - name: 🎯 快速配置文件查找与应用
        timeout-minutes: 1
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "快速配置文件查找与应用..."
          CONFIG_PROFILE="${{ github.event.inputs.config_profile }}"
          echo "输入配置模式: $CONFIG_PROFILE"
          
          echo "🔍 快速配置文件搜索..."
          
          # 使用与"智能文件发现"相同的快速搜索策略
          CONFIG_FOUND=""
          
          # 方法1: 直接路径查找（最快）- 在源码目录和配置仓库目录都查找
          echo "🎯 直接路径查找..."
          if [ -f "$CONFIG_PROFILE" ]; then
            CONFIG_FOUND="$CONFIG_PROFILE"
            echo "✅ 在当前目录找到配置文件: $CONFIG_FOUND"
          elif [ -f "../$CONFIG_PROFILE" ]; then
            CONFIG_FOUND="../$CONFIG_PROFILE"
            echo "✅ 在上级目录找到配置文件: $CONFIG_FOUND"
          elif [ -f "$GITHUB_WORKSPACE/$CONFIG_PROFILE" ]; then
            CONFIG_FOUND="$GITHUB_WORKSPACE/$CONFIG_PROFILE"
            echo "✅ 在工作区找到配置文件: $CONFIG_FOUND"
          fi
          
          # 方法2: 受限深度搜索 - 在源码目录和配置仓库目录都搜索
          if [ -z "$CONFIG_FOUND" ]; then
            echo "🔍 受限深度搜索..."
            # 先在源码目录搜索
            CONFIG_FOUND=$(find . -maxdepth 3 -name "$CONFIG_PROFILE" -type f 2>/dev/null | head -1)
            if [ -z "$CONFIG_FOUND" ]; then
              # 在配置仓库目录搜索
              CONFIG_FOUND=$(find $GITHUB_WORKSPACE -maxdepth 3 -name "$CONFIG_PROFILE" -type f 2>/dev/null | head -1)
            fi
            if [ -n "$CONFIG_FOUND" ]; then
              echo "✅ 通过受限搜索找到配置文件: $CONFIG_FOUND"
            fi
          fi
          
          # 方法3: 使用文件发现步骤的结果（如果可用）- 修正路径
          if [ -z "$CONFIG_FOUND" ] && [ -f "${{ env.BUILD_LOG_DIR }}/all_config_files.txt" ]; then
            echo "🔍 使用文件发现缓存..."
            # 从缓存文件中读取路径，并确保路径正确
            CACHED_PATH=$(grep "$CONFIG_PROFILE" "${{ env.BUILD_LOG_DIR }}/all_config_files.txt" | head -1)
            if [ -n "$CACHED_PATH" ]; then
              # 检查路径是否以 ./ 开头，如果是则转换为绝对路径
              if [[ "$CACHED_PATH" == ./* ]]; then
                CONFIG_FOUND="$GITHUB_WORKSPACE/${CACHED_PATH#./}"
              else
                CONFIG_FOUND="$CACHED_PATH"
              fi
              # 验证文件是否存在
              if [ -f "$CONFIG_FOUND" ]; then
                echo "✅ 通过缓存找到配置文件: $CONFIG_FOUND"
              else
                echo "⚠️ 缓存中的文件不存在: $CONFIG_FOUND"
                CONFIG_FOUND=""
              fi
            fi
          fi
          
          # 方法4: 快速模式匹配
          if [ -z "$CONFIG_FOUND" ] && [[ "$CONFIG_PROFILE" == *"*"* ]]; then
            echo "🔍 快速模式匹配..."
            CONFIG_FOUND=$(find . -maxdepth 3 -name "$CONFIG_PROFILE" -type f 2>/dev/null | head -1)
            if [ -z "$CONFIG_FOUND" ]; then
              CONFIG_FOUND=$(find $GITHUB_WORKSPACE -maxdepth 3 -name "$CONFIG_PROFILE" -type f 2>/dev/null | head -1)
            fi
            if [ -n "$CONFIG_FOUND" ]; then
              echo "✅ 通过模式匹配找到配置文件: $CONFIG_FOUND"
            fi
          fi
          
          # 方法5: 显示可用配置并选择第一个
          if [ -z "$CONFIG_FOUND" ]; then
            echo "🔍 显示可用配置文件..."
            AVAILABLE_CONFIGS=$(find . -maxdepth 3 -name "*.config" -o -name ".config_*" -o -name "config_*" 2>/dev/null | head -5)
            if [ -z "$AVAILABLE_CONFIGS" ]; then
              AVAILABLE_CONFIGS=$(find $GITHUB_WORKSPACE -maxdepth 3 -name "*.config" -o -name ".config_*" -o -name "config_*" 2>/dev/null | head -5)
            fi
            if [ -n "$AVAILABLE_CONFIGS" ]; then
              CONFIG_FOUND=$(echo "$AVAILABLE_CONFIGS" | head -1)
              echo "⚠️ 使用第一个找到的配置文件: $CONFIG_FOUND"
              echo "可用配置文件:"
              echo "$AVAILABLE_CONFIGS"
            fi
          fi
          
          if [ -n "$CONFIG_FOUND" ]; then
            echo "📋 复制配置文件: $CONFIG_FOUND -> .config"
            # 确保文件存在
            if [ -f "$CONFIG_FOUND" ]; then
              cp "$CONFIG_FOUND" .config
              echo "🔍 配置文件基本信息:"
              CONFIG_SIZE=$(stat -c%s .config 2>/dev/null || echo "未知")
              echo "  - 文件: $(basename $CONFIG_FOUND)"
              echo "  - 大小: ${CONFIG_SIZE} 字节"
              echo "  - 来源: $CONFIG_FOUND"
              
              # 快速分析配置
              TARGET_ARCH=$(grep "CONFIG_TARGET_ARCH_PACKAGES" .config 2>/dev/null | cut -d= -f2 | tr -d '"' | head -1 || echo "未知")
              echo "  - 架构: $TARGET_ARCH"
              echo "✅ 配置应用完成"
            else
              echo "❌ 错误: 配置文件不存在: $CONFIG_FOUND"
              echo "🔍 验证文件存在性..."
              ls -la "$(dirname "$CONFIG_FOUND")" 2>/dev/null || echo "目录不存在"
              exit 1
            fi
          else
            echo "❌ 错误: 无法找到配置文件 '$CONFIG_PROFILE'"
            echo ""
            echo "🔍 调试信息:"
            echo "当前目录: $(pwd)"
            echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
            echo "快速配置文件列表:"
            find . -maxdepth 2 -name "*.config" -o -name ".config_*" 2>/dev/null | head -10 || echo "当前目录无配置文件"
            find $GITHUB_WORKSPACE -maxdepth 2 -name "*.config" -o -name ".config_*" 2>/dev/null | head -10 || echo "工作区无配置文件"
            exit 1
          fi

      - name: 🔧 高级性能优化配置
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "应用高级性能优化配置..."
          echo "⚡ 应用基础优化..."
          sed -i 's/CONFIG_DEBUG=y/# CONFIG_DEBUG is not set/' .config 2>/dev/null || true
          sed -i 's/CONFIG_DEVEL=y/# CONFIG_DEVEL is not set/' .config 2>/dev/null || true
          echo "CONFIG_CCACHE=y" >> .config
          
          case "${{ github.event.inputs.build_optimization }}" in
            "speed")
              echo "🚀 应用极速优化配置..."
              echo "CONFIG_DEBUG_INFO=n" >> .config
              ;;
            "stability")
              echo "🛡️ 应用稳定优化配置..."
              echo "CONFIG_SMALL_FLASH=y" >> .config
              ;;
            *)
              echo "⚖️ 应用平衡优化配置..."
              ;;
          esac
          
          echo "🔄 运行配置处理..."
          # 修复Broken pipe错误
          echo "n" | make oldconfig >/dev/null 2>&1 || make defconfig >/dev/null 2>&1 || echo "配置处理完成"
          echo "✅ 性能优化配置完成"

      - name: 🛠️ 全面工具链编译与验证
        timeout-minutes: 90
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始全面工具链编译..."
          START_TIME=$(date +%s)
          mkdir -p ${{ env.TOOLCHAIN_LOG_DIR }}
          
          echo "🔧 编译Host工具..."
          if ! make tools/compile -j$(($(nproc) - 1)) V=sc 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/host-tools.log; then
            echo "❌ Host工具编译失败，尝试单线程..."
            if ! make tools/compile -j1 V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/host-tools-single.log; then
              echo "❌ Host工具编译彻底失败"
              exit 1
            fi
          fi
          
          echo "🔧 编译工具链..."
          if ! make toolchain/compile -j$(($(nproc) - 1)) V=sc 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/toolchain-compile.log; then
            echo "❌ 工具链编译失败，尝试单线程..."
            if ! make toolchain/compile -j1 V=s 2>&1 | tee ${{ env.TOOLCHAIN_LOG_DIR }}/toolchain-compile-single.log; then
              echo "❌ 工具链编译彻底失败"
              exit 1
            fi
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "⏱️ 工具链编译耗时: ${DURATION}秒"
          echo "✅ 工具链编译完成"

      - name: 🔍 深度工具链验证
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "=== 深度工具链验证 ==="
          echo "🔧 关键工具验证:"
          for tool in m4 flex bison; do
            tool_path=$(find staging_dir/host/bin -name "$tool" -type f 2>/dev/null | head -1)
            if [ -n "$tool_path" ] && [ -x "$tool_path" ]; then
              echo "✅ $tool: 可用"
            else
              echo "❌ $tool: 缺失"
              exit 1
            fi
          done
          
          echo "🎯 目标工具链验证:"
          TARGET_GCC=$(find staging_dir/toolchain-*/bin/ -name "*gcc" -type f 2>/dev/null | head -1)
          if [ -n "$TARGET_GCC" ] && [ -x "$TARGET_GCC" ]; then
            echo "✅ 目标GCC: 可用"
          else
            echo "❌ 目标GCC: 缺失"
            exit 1
          fi
          echo "✅ 深度工具链验证完成"

      - name: 📦 详细自定义功能处理
        if: github.event.inputs.enable_custom_features == 'true'
        timeout-minutes: 10
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "处理详细自定义功能..."
          
          # 使用配置仓库的绝对路径
          CONFIG_REPO_DIR="$GITHUB_WORKSPACE"
          CUSTOM_FEATURES_DIR="${{ env.CUSTOM_FEATURES_DIR }}"
          
          # 如果环境变量中有设置，使用环境变量，否则尝试默认路径
          if [ -z "$CUSTOM_FEATURES_DIR" ]; then
            CUSTOM_FEATURES_DIR="$CONFIG_REPO_DIR/firmware-config/custom-features"
            echo "ℹ️ 使用默认自定义功能目录: $CUSTOM_FEATURES_DIR"
          fi
          
          if [ -n "$CUSTOM_FEATURES_DIR" ] && [ -d "$CUSTOM_FEATURES_DIR" ]; then
            echo "🔍 使用自定义功能目录: $CUSTOM_FEATURES_DIR"
            
            # 验证目录内容
            echo "📁 目录内容验证:"
            ls -la "$CUSTOM_FEATURES_DIR" 2>/dev/null || echo "无法访问目录"
            
            # 详细处理预编译IPK包
            echo "📦 详细处理预编译IPK包..."
            IPK_DIRS=("$CUSTOM_FEATURES_DIR/prebuilt-ipks" "$CUSTOM_FEATURES_DIR/ipks" "$CUSTOM_FEATURES_DIR/packages")
            IPK_PROCESSED=false
            
            for ipk_dir in "${IPK_DIRS[@]}"; do
              if [ -d "$ipk_dir" ]; then
                echo "🔍 检查IPK目录: $ipk_dir"
                IPK_FILES=$(find "$ipk_dir" -name "*.ipk" -type f 2>/dev/null)
                IPK_COUNT=$(echo "$IPK_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
                
                if [ "$IPK_COUNT" -gt 0 ]; then
                  echo "✅ 在 $ipk_dir 找到 $IPK_COUNT 个IPK文件"
                  mkdir -p package/base-files/files/usr/lib/opkg/custom
                  
                  echo "📋 IPK文件列表:"
                  for ipk in $IPK_FILES; do
                    if [ -f "$ipk" ]; then
                      filename=$(basename "$ipk")
                      filesize=$(stat -c%s "$ipk" 2>/dev/null || echo "未知")
                      echo "  - $filename ($(($filesize/1024))KB)"
                      cp "$ipk" package/base-files/files/usr/lib/opkg/custom/
                      echo "    ✅ 已复制到固件"
                    fi
                  done
                  IPK_PROCESSED=true
                  break
                else
                  echo "ℹ️ 目录 $ipk_dir 中没有找到IPK文件"
                fi
              fi
            done
            
            if [ "$IPK_PROCESSED" = "false" ]; then
              echo "ℹ️ 未找到任何IPK文件"
            fi
            
            # 详细处理自定义脚本
            echo ""
            echo "📜 详细处理自定义脚本..."
            SCRIPT_DIRS=("$CUSTOM_FEATURES_DIR/scripts" "$CUSTOM_FEATURES_DIR/script")
            SCRIPT_PROCESSED=false
            
            for script_dir in "${SCRIPT_DIRS[@]}"; do
              if [ -d "$script_dir" ]; then
                echo "🔍 检查脚本目录: $script_dir"
                SCRIPT_FILES=$(find "$script_dir" -name "*.sh" -type f 2>/dev/null)
                SCRIPT_COUNT=$(echo "$SCRIPT_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
                
                if [ "$SCRIPT_COUNT" -gt 0 ]; then
                  echo "✅ 在 $script_dir 找到 $SCRIPT_COUNT 个脚本文件"
                  
                  echo "📋 脚本文件列表:"
                  for script in $SCRIPT_FILES; do
                    if [ -f "$script" ]; then
                      filename=$(basename "$script")
                      echo "  - $filename"
                      echo "    ▶️ 执行脚本..."
                      chmod +x "$script"
                      export SOURCE_DIR="${{ env.SOURCE_DIR }}"
                      export BUILD_DIR="${{ env.SOURCE_DIR }}/build_dir"
                      export STAGING_DIR="${{ env.SOURCE_DIR }}/staging_dir"
                      
                      if timeout 300 bash "$script"; then
                        echo "    ✅ 脚本执行成功"
                      else
                        EXIT_CODE=$?
                        if [ $EXIT_CODE -eq 124 ]; then
                          echo "    ⏰ 脚本执行超时"
                        else
                          echo "    ⚠️ 脚本执行失败 (退出码: $EXIT_CODE)"
                        fi
                      fi
                    fi
                  done
                  SCRIPT_PROCESSED=true
                  break
                else
                  echo "ℹ️ 目录 $script_dir 中没有找到脚本文件"
                fi
              fi
            done
            
            if [ "$SCRIPT_PROCESSED" = "false" ]; then
              echo "ℹ️ 未找到任何脚本文件"
            fi
            
            # 处理自定义补丁
            echo ""
            echo "🔧 处理自定义补丁..."
            PATCH_FILES=$(find "$CUSTOM_FEATURES_DIR" -name "*.patch" -type f 2>/dev/null)
            PATCH_COUNT=$(echo "$PATCH_FILES" | grep -v '^$' | wc -l 2>/dev/null || echo 0)
            
            if [ "$PATCH_COUNT" -gt 0 ]; then
              echo "✅ 找到 $PATCH_COUNT 个补丁文件"
              for patch in $PATCH_FILES; do
                if [ -f "$patch" ]; then
                  echo "🔧 应用补丁: $(basename $patch)"
                  if patch -p1 -N < "$patch"; then
                    echo "✅ 补丁应用成功: $(basename $patch)"
                  else
                    echo "⚠️ 补丁应用失败或已应用: $(basename $patch)"
                  fi
                fi
              done
            else
              echo "ℹ️ 未找到补丁文件"
            fi
            
          else
            echo "ℹ️ 无自定义功能目录或目录不存在，跳过自定义功能处理"
            echo "搜索的目录: $CUSTOM_FEATURES_DIR"
          fi
          echo "✅ 自定义功能处理完成"

      - name: 🔧 深度目录修复与权限设置
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "=== 深度目录修复与权限设置 ==="
          
          echo "🔧 创建所有可能的根文件系统目录..."
          # 创建所有可能的根文件系统目录结构
          ROOT_PATTERNS=("root.orig-*" "root-*" "root.default-*")
          
          for pattern in "${ROOT_PATTERNS[@]}"; do
            echo "搜索模式: $pattern"
            find build_dir staging_dir -type d -name "$pattern" 2>/dev/null | while read root_dir; do
              echo "🔧 修复目录: $root_dir"
              # 创建必要的子目录
              mkdir -p "$root_dir/tmp" 2>/dev/null || true
              mkdir -p "$root_dir/usr/lib/opkg" 2>/dev/null || true
              mkdir -p "$root_dir/var/lock" 2>/dev/null || true
              mkdir -p "$root_dir/var/run" 2>/dev/null || true
              
              # 设置权限
              chmod 755 "$root_dir/tmp" 2>/dev/null || true
              chmod 755 "$root_dir/usr" 2>/dev/null || true
              chmod 755 "$root_dir/var" 2>/dev/null || true
            done
          done
          
          echo "🔧 修复目标特定目录..."
          # 特别修复错误中提到的目录
          TARGET_DIRS=(
            "build_dir/target-arm_cortex-a7+neon-vfpv4_musl_eabi/root.orig-ipq40xx"
            "staging_dir/target-arm_cortex-a7+neon-vfpv4_musl_eabi/root.orig-ipq40xx"
          )
          
          for target_dir in "${TARGET_DIRS[@]}"; do
            if [ -d "$target_dir" ]; then
              echo "🔧 修复目标目录: $target_dir"
              mkdir -p "$target_dir/tmp"
              mkdir -p "$target_dir/usr/lib/opkg"
              chmod 755 "$target_dir/tmp"
              echo "✅ 已创建: $target_dir/tmp"
            else
              echo "ℹ️ 目录不存在，创建: $target_dir"
              mkdir -p "$target_dir/tmp" 2>/dev/null || true
            fi
          done
          
          echo "🔧 修复符号链接问题..."
          # 检查并修复可能的符号链接问题
          if [ -L "tmp" ] && [ ! -e "tmp" ]; then
            echo "🔧 修复损坏的tmp符号链接..."
            rm -f tmp
            mkdir -p tmp
          fi
          
          echo "✅ 深度目录修复完成"

      - name: 🏗️ 智能编译固件
        timeout-minutes: 240
        id: compile-firmware
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "开始智能编译固件..."
          export FORCE_UNSAFE_CONFIGURE=1
          export TERM=linux
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros
          CPU_CORES=$(nproc)
          BUILD_JOBS=$((CPU_CORES - 1))
          mkdir -p ${{ env.BUILD_LOG_DIR }}
          START_TIME=$(date +%s)
          
          echo "📊 编译参数汇总:"
          echo "  - 源码库: ${{ env.SOURCE_PRESET }}"
          echo "  - 实际分支: ${{ env.ACTUAL_BRANCH }}"
          echo "  - 优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "  - 工具链策略: ${{ github.event.inputs.toolchain_strategy }}"
          echo "  - 自定义功能: ${{ github.event.inputs.enable_custom_features }}"
          echo "  - CPU核心: $CPU_CORES"
          echo "  - 编译任务数: $BUILD_JOBS"
          echo "  - CCache: 已启用"
          
          echo "🔧 开始编译..."
          LOG_FILE="${{ env.BUILD_LOG_DIR }}/firmware-compile.log"
          ERROR_LOG_FILE="${{ env.BUILD_LOG_DIR }}/firmware-errors.log"
          
          # 分阶段编译以提高稳定性
          {
            echo "阶段1: 编译准备..."
            make tools/install 2>/dev/null || true
            make toolchain/install 2>/dev/null || true
            
            echo "阶段2: 编译内核和基础包..."
            make target/linux/compile -j$BUILD_JOBS V=s
            
            echo "阶段3: 编译所有软件包..."
            # 跳过有问题的包
            make package/compile -j$BUILD_JOBS V=s || {
              echo "⚠️ 部分包编译失败，继续其他包..."
              # 尝试跳过有问题的包继续编译
              make package/compile -j$BUILD_JOBS V=sc || true
            }
            
            echo "阶段4: 动态目录修复..."
            # 在安装前再次检查并创建必要的目录
            echo "🔧 动态创建缺失的目录..."
            find build_dir staging_dir -type d -name "root.orig-*" 2>/dev/null | while read root_dir; do
              if [ ! -d "$root_dir/tmp" ]; then
                mkdir -p "$root_dir/tmp"
                echo "✅ 动态创建: $root_dir/tmp"
              fi
              if [ ! -d "$root_dir/usr/lib/opkg" ]; then
                mkdir -p "$root_dir/usr/lib/opkg"
                echo "✅ 动态创建: $root_dir/usr/lib/opkg"
              fi
            done
            
            echo "阶段5: 最终安装和固件生成..."
            # 修复可能的目录权限问题
            sudo chmod -R 755 build_dir/ staging_dir/ 2>/dev/null || true
            
            # 使用更健壮的安装方法
            echo "🔧 尝试并行安装..."
            if ! make package/install -j$BUILD_JOBS V=s; then
              echo "⚠️ 并行安装失败，尝试单线程安装..."
              if ! make package/install -j1 V=s; then
                echo "❌ 包安装失败，记录错误但继续..."
                grep -i "error\|failed" $LOG_FILE | tail -20 > $ERROR_LOG_FILE 2>/dev/null || true
              fi
            fi
            
            echo "🔧 尝试目标安装..."
            if ! make target/install -j1 V=s; then
              echo "❌ 目标安装失败，但尝试继续生成固件..."
              # 即使目标安装失败，也尝试生成固件
              if make -j1 V=s 2>/dev/null; then
                echo "✅ 固件生成成功"
              else
                echo "❌ 固件生成失败"
                exit 1
              fi
            fi
            
            echo "阶段6: 编译完成验证..."
          } 2>&1 | tee "$LOG_FILE"
          
          COMPILE_EXIT_CODE=${PIPESTATUS[0]}
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV
          
          if [ $COMPILE_EXIT_CODE -eq 0 ]; then
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
            echo "🎉 编译成功完成!"
          else
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            echo "❌ 编译失败，退出码: $COMPILE_EXIT_CODE"
            echo "=== 详细错误分析 ==="
            if [ -f "$LOG_FILE" ]; then
              echo "关键错误:"
              grep -i "error\|failed\|undefined\|missing\|no such file\|cannot create\|Broken pipe" "$LOG_FILE" | tail -30 || echo "无明确错误信息"
              echo ""
              echo "最后编译步骤:"
              tail -150 "$LOG_FILE" | grep -E "(Configuring|Compiling|Linking|Installing|ERROR|Error|error|Collected errors)" | tail -50 || echo "无法获取最后步骤"
              
              # 特别检查目录相关问题
              echo ""
              echo "🔍 目录结构检查:"
              find build_dir -name "root.orig-*" -type d 2>/dev/null | head -5 | while read dir; do
                if [ -d "$dir" ]; then
                  echo "检查目录: $dir"
                  ls -la "$dir/" 2>/dev/null | head -8 || echo "无法访问目录"
                  echo "tmp目录状态:"
                  if [ -d "$dir/tmp" ]; then
                    ls -la "$dir/tmp/" 2>/dev/null | head -3 || echo "无法访问tmp目录"
                  else
                    echo "❌ tmp目录不存在"
                  fi
                fi
              done
            fi
            exit 1
          fi
          
          echo "⏱️ 总编译耗时: ${DURATION}秒 ($(($DURATION/60))分钟)"

      - name: 🔍 详细固件产物验证与收集
        if: env.BUILD_STATUS == 'success'
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "=== 详细固件产物验证与收集 ==="
          mkdir -p ${{ env.ARTIFACTS_DIR }}/firmware
          mkdir -p ${{ env.ARTIFACTS_DIR }}/logs
          mkdir -p ${{ env.ARTIFACTS_DIR }}/configs
          
          echo "🔍 搜索固件文件..."
          TOTAL_FIRMWARE_COUNT=0
          
          # 详细搜索固件文件
          if [ -d "bin/targets" ]; then
            echo "📁 复制标准输出目录..."
            cp -r bin/targets ${{ env.ARTIFACTS_DIR }}/firmware/
            FIRMWARE_COUNT=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | wc -l)
            echo "✅ 在 bin/targets 找到 $FIRMWARE_COUNT 个固件文件"
            TOTAL_FIRMWARE_COUNT=$((TOTAL_FIRMWARE_COUNT + FIRMWARE_COUNT))
            
            # 显示找到的固件文件
            echo "📋 固件文件列表:"
            find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | head -20 | while read file; do
              if [ -f "$file" ]; then
                file_size=$(stat -c%s "$file" 2>/dev/null || echo 0)
                echo "  - $(basename "$file") ($(($file_size/1024/1024))MB)"
              fi
            done
          else
            echo "⚠️ 标准输出目录 bin/targets 不存在"
            echo "📁 当前 bin 目录内容:"
            ls -la bin/ 2>/dev/null || echo "bin 目录不存在"
          fi
          
          # 在其他位置搜索
          echo "🔍 在其他位置搜索固件..."
          OTHER_FIRMWARE=$(find . -maxdepth 4 -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | grep -v "bin/targets" | head -20)
          if [ -n "$OTHER_FIRMWARE" ]; then
            OTHER_COUNT=$(echo "$OTHER_FIRMWARE" | wc -l)
            echo "✅ 在其他位置找到 $OTHER_COUNT 个固件相关文件"
            for file in $OTHER_FIRMWARE; do
              if [ -f "$file" ]; then
                file_size=$(stat -c%s "$file" 2>/dev/null || echo 0)
                if [ "$file_size" -gt 1000000 ]; then
                  rel_path=$(echo "$file" | sed 's|^\./||')
                  target_dir="${{ env.ARTIFACTS_DIR }}/firmware/other/$(dirname "$rel_path")"
                  mkdir -p "$target_dir"
                  cp "$file" "$target_dir/"
                  echo "📦 已收集: $rel_path ($(($file_size/1024/1024))MB)"
                  TOTAL_FIRMWARE_COUNT=$((TOTAL_FIRMWARE_COUNT + 1))
                fi
              fi
            done
          fi
          
          echo "📋 收集构建信息和日志..."
          # 收集配置文件
          cp .config ${{ env.ARTIFACTS_DIR }}/configs/ 2>/dev/null || echo "⚠️ 无法复制.config"
          cp feeds.conf ${{ env.ARTIFACTS_DIR }}/configs/ 2>/dev/null || echo "⚠️ 无法复制feeds.conf"
          
          # 收集所有日志文件
          echo "📁 收集日志文件..."
          if [ -d "${{ env.BUILD_LOG_DIR }}" ]; then
            cp -r ${{ env.BUILD_LOG_DIR }}/* ${{ env.ARTIFACTS_DIR }}/logs/ 2>/dev/null || echo "⚠️ 无法复制构建日志"
          fi
          if [ -d "${{ env.TOOLCHAIN_LOG_DIR }}" ]; then
            cp -r ${{ env.TOOLCHAIN_LOG_DIR }}/* ${{ env.ARTIFACTS_DIR }}/logs/ 2>/dev/null || echo "⚠️ 无法复制工具链日志"
          fi
          
          # 收集编译过程中的重要日志
          echo "📁 收集编译过程日志..."
          find . -name "*.log" -type f -size +1k 2>/dev/null | head -10 | while read log_file; do
            log_name=$(echo "$log_file" | sed 's|^\./||' | tr '/' '_')
            cp "$log_file" "${{ env.ARTIFACTS_DIR }}/logs/process_$log_name" 2>/dev/null || true
          done
          
          if [ $TOTAL_FIRMWARE_COUNT -eq 0 ]; then
            echo "❌ 错误: 未找到任何固件文件"
            echo "当前目录结构:"
            find . -maxdepth 3 -type d | head -20
            echo ""
            echo "所有可能的固件文件:"
            find . -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" 2>/dev/null | head -30 || echo "无固件文件"
            exit 1
          else
            echo "✅ 固件验证与收集完成: 总共 $TOTAL_FIRMWARE_COUNT 个文件"
          fi
          echo "FIRMWARE_COUNT=$TOTAL_FIRMWARE_COUNT" >> $GITHUB_ENV

      - name: 📊 生成详细构建报告
        if: always()
        run: |
          cd ${{ env.SOURCE_DIR }}
          echo "生成详细构建报告..."
          REPORT_FILE="${{ env.ARTIFACTS_DIR }}/detailed-build-report.txt"
          
          {
            echo "=== 详细固件构建报告 ==="
            echo "构建时间: $(date)"
            echo "构建状态: ${{ env.BUILD_STATUS || 'unknown' }}"
            echo "编译时长: ${{ env.BUILD_DURATION || 'N/A' }}秒"
            echo "固件数量: ${{ env.FIRMWARE_COUNT || 0 }}"
            echo ""
            echo "=== 源码信息 ==="
            echo "源码库: ${{ env.SOURCE_PRESET }}"
            echo "请求分支: ${{ env.SOURCE_BRANCH }}"
            echo "实际分支: ${{ env.ACTUAL_BRANCH }}"
            echo "推荐分支: ${{ env.RECOMMENDED_BRANCH }}"
            echo "提交哈希: ${{ env.COMMIT_HASH || 'unknown' }}"
            echo ""
            echo "=== 编译配置 ==="
            echo "配置文件: ${{ github.event.inputs.config_profile }}"
            echo "优化策略: ${{ github.event.inputs.build_optimization }}"
            echo "工具链策略: ${{ github.event.inputs.toolchain_strategy }}"
            echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}"
            echo ""
            echo "=== 系统信息 ==="
            echo "Runner: ${{ runner.os }}"
            echo "CPU核心: $(nproc)"
            echo "内存: $(free -h | awk '/^Mem:/{print $2}')"
            echo "磁盘空间: $(df -h /mnt | awk 'NR==2{print $4}') 可用"
            echo ""
            echo "=== 错误分析 ==="
            if [ "${{ env.BUILD_STATUS }}" = "failed" ]; then
              echo "主要错误: opkg锁文件创建失败"
              echo "根本原因:"
              echo "  - 路径拼接错误导致双斜杠: //tmp/opkg.lock"
              echo "  - 目标根文件系统目录结构不完整"
              echo "  - 编译系统在安装阶段无法创建必要目录"
              echo ""
              echo "已实施的解决方案:"
              echo "  - 深度目录修复，预创建所有可能的根文件系统目录"
              echo "  - 动态目录创建，在编译过程中实时修复缺失目录"
              echo "  - 改进的错误恢复机制，即使安装失败也尝试生成固件"
              echo ""
              echo "建议进一步排查:"
              echo "  - 检查OpenWrt版本与配置文件的兼容性"
              echo "  - 验证目标设备的支持状态"
              echo "  - 考虑使用更新的源码分支"
            fi
            echo ""
            if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
              echo "=== 产物信息 ==="
              echo "固件文件列表:"
              find ${{ env.ARTIFACTS_DIR }}/firmware -type f 2>/dev/null | xargs -I {} basename {} 2>/dev/null | sort | head -20
              echo ""
              echo "日志文件列表:"
              find ${{ env.ARTIFACTS_DIR }}/logs -type f 2>/dev/null | xargs -I {} basename {} 2>/dev/null | sort | head -10
            else
              echo "构建失败，无固件产物"
            fi
            echo ""
            echo "=== 自定义功能状态 ==="
            if [ "${{ github.event.inputs.enable_custom_features }}" = "true" ]; then
              if [ -n "${{ env.CUSTOM_FEATURES_DIR }}" ]; then
                echo "✅ 自定义功能已启用"
                echo "自定义目录: ${{ env.CUSTOM_FEATURES_DIR }}"
              else
                echo "⚠️ 自定义功能已启用但未找到目录"
              fi
            else
              echo "ℹ️ 自定义功能未启用"
            fi
          } > "$REPORT_FILE"
          
          echo "✅ 详细构建报告生成完成"

      - name: 💾 上传构建产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Firmware-${{ github.run_number }}-${{ env.SOURCE_PRESET }}-${{ env.ACTUAL_BRANCH }}-${{ env.BUILD_STATUS || 'unknown' }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: 30

      - name: 🧹 编译后智能清理
        if: always()
        run: |
          echo "开始编译后智能清理..."
          echo "=== 清理前状态 ==="
          df -h
          free -h
          
          if [ -d "${{ env.SOURCE_DIR }}" ]; then
            cd ${{ env.SOURCE_DIR }}
            echo "🧹 清理编译临时文件..."
            rm -rf build_dir/* staging_dir/* tmp/* 2>/dev/null || true
          fi
          
          echo "🧹 清理交换文件..."
          sudo swapoff /mnt/swapfile 2>/dev/null || true
          sudo rm -f /mnt/swapfile 2>/dev/null || true
          
          echo ""
          echo "=== 清理后状态 ==="
          df -h
          free -h
          echo "✅ 智能清理完成"

      - name: 📊 最终综合报告
        if: always()
        run: |
          echo "=== 最终综合报告 ==="
          echo "🎯 工作流: ${{ github.workflow }}"
          echo "🆔 运行ID: ${{ github.run_id }}"
          echo "🆔 运行号: ${{ github.run_number }}"
          echo ""
          echo "📦 源码信息:"
          echo "  - 预设: ${{ env.SOURCE_PRESET }}"
          echo "  - 分支: ${{ env.ACTUAL_BRANCH }}"
          echo "  - 推荐: ${{ env.RECOMMENDED_BRANCH }}"
          echo "  - 提交: ${{ env.COMMIT_HASH || 'unknown' }}"
          echo ""
          echo "⚙️ 编译配置:"
          echo "  - 配置文件: ${{ github.event.inputs.config_profile }}"
          echo "  - 优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "  - 工具链: ${{ github.event.inputs.toolchain_strategy }}"
          echo "  - 自定义: ${{ github.event.inputs.enable_custom_features }}"
          echo ""
          echo "📈 构建结果:"
          echo "  - 状态: ${{ env.BUILD_STATUS || 'unknown' }}"
          echo "  - 时长: ${{ env.BUILD_DURATION || 'N/A' }}秒"
          echo "  - 固件数量: ${{ env.FIRMWARE_COUNT || 0 }}"
          echo ""
          if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
            echo "🎉 构建成功！固件已上传到 Artifacts"
            echo "📦 下载 Artifacts 获取编译产物"
            echo "🔧 固件文件在 firmware/ 目录中"
            echo "📋 详细报告在 detailed-build-report.txt"
            echo "📁 日志文件在 logs/ 目录中"
          else
            echo "❌ 构建失败"
            echo "🔍 请查看详细日志分析错误原因"
            echo "📋 检查 Artifacts 中的编译日志"
            echo "💡 根本问题: opkg锁文件创建失败 (路径拼接错误)"
            echo "🛠️ 已实施的修复:"
            echo "  - 深度目录预创建"
            echo "  - 动态目录修复"
            echo "  - 改进的错误恢复"
            echo "🔧 建议进一步操作:"
            echo "  - 检查配置文件与源码版本的兼容性"
            echo "  - 尝试不同的源码分支"
            echo "  - 验证目标设备支持状态"
          fi
