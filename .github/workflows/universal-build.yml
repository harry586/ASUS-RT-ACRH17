name: "Universal Firmware Builder"

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      
      source_branch:
        description: '源码分支 (auto=自动推荐)'
        required: true
        default: 'auto'
        type: string
        
      config_profile:
        description: '设备配置文件'
        required: true
        type: choice
        options:
          - configs/.config_rt-ac42u_immortalwrt
          - configs/.config_rt-acrh17_lede
          - configs/.config_x86-64_openwrt
          - configs/.config_default
        default: 'configs/.config_rt-ac42u_immortalwrt'
      
      enable_custom_features:
        description: '启用自定义功能'
        required: false
        default: true
        type: boolean

env:
  TZ: "Asia/Shanghai"
  BUILD_TIMEOUT: 180

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: "📥 检出配置仓库"
      uses: actions/checkout@v4
      with:
        path: config-repo

    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        cd config-repo
        echo "读取源码库配置..."
        echo "选择的预设: ${{ github.event.inputs.source_preset }}"
        
        if [ ! -f "repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          exit 1
        fi
        
        echo "repositories.json 内容:"
        cat repositories.json
        echo "---"
        
        PRESET="${{ github.event.inputs.source_preset }}"
        
        # 修复：从 repositories 对象中获取配置
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" repositories.json)
        
        # 分支处理
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" repositories.json)
          echo "自动选择推荐分支: $BRANCH"
        fi
        
        # 验证获取的值
        if [ -z "$SOURCE_URL" ]; then
          echo "❌ 错误: 无法从repositories.json获取源码URL，请检查$PRESET配置"
          exit 1
        fi
        
        if [ -z "$BRANCH" ]; then
          echo "❌ 错误: 无法获取源码分支"
          exit 1
        fi
        
        echo "源码库: $PRESET - $DESCRIPTION"
        echo "仓库URL: $SOURCE_URL"
        echo "使用分支: $BRANCH"
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV

    - name: "🧹 准备构建环境"
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip python3-serial python3-setuptools rsync unzip zlib1g-dev file wget jq

    - name: "📥 获取源代码"
      run: |
        echo "克隆源码仓库: ${{ env.SOURCE_URL }}"
        echo "使用分支: ${{ env.SOURCE_BRANCH }}"
        git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" source

    - name: "🔧 源码初始化"
      run: |
        cd source
        if [ -f "feeds.conf" ] || [ -f "feeds.conf.default" ]; then
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "✅ Feeds更新完成"
        fi

    - name: "🎨 应用自定义配置"
      run: |
        cd source
        CONFIG_FILE="../config-repo/${{ github.event.inputs.config_profile }}"
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 错误: 配置文件不存在: $CONFIG_FILE"
          exit 1
        fi
        cp "$CONFIG_FILE" .config
        echo "✅ 配置文件应用完成"

    - name: "🛠️ 执行自定义脚本"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd source
        SCRIPTS_DIR="../config-repo/custom-features/scripts"
        if [ ! -d "$SCRIPTS_DIR" ]; then
          echo "ℹ️ 自定义脚本目录不存在: $SCRIPTS_DIR"
          exit 0
        fi
        SCRIPTS=$(find "$SCRIPTS_DIR" -name "*.sh" -type f | sort)
        if [ -z "$SCRIPTS" ]; then
          echo "ℹ️ 未找到任何脚本文件"
          exit 0
        fi
        echo "找到以下脚本文件:"
        echo "$SCRIPTS"
        for script in $SCRIPTS; do
          echo "执行脚本: $(basename "$script")"
          chmod +x "$script"
          if bash "$script"; then
            echo "✅ $(basename "$script") 执行成功"
          else
            echo "❌ $(basename "$script") 执行失败"
            exit 1
          fi
        done
        echo "✅ 所有自定义脚本执行完成"

    - name: "🏗️ 编译固件"
      timeout-minutes: ${{ env.BUILD_TIMEOUT }}
      run: |
        cd source
        BUILD_JOBS=$(( $(nproc) - 1 ))
        [ $BUILD_JOBS -lt 1 ] && BUILD_JOBS=1
        echo "使用并行任务数: $BUILD_JOBS"
        START_TIME=$(date +%s)
        echo "开始编译过程..."
        make defconfig
        make download -j${BUILD_JOBS} || make download -j1 V=s
        make -j${BUILD_JOBS} || make -j1 V=s
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "✅ 编译完成! 耗时: ${DURATION}秒"
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

    - name: "📦 收集构建产物"
      run: |
        cd source
        echo "收集编译输出文件..."
        FIRMWARE_FILES=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10)
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "生成的固件文件:"
          echo "$FIRMWARE_FILES"
        else
          echo "⚠️ 未找到标准固件文件"
        fi
        mkdir -p ../artifacts
        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true
        echo "源码: ${{ env.SOURCE_URL }}" > ../artifacts/build-info.txt
        echo "分支: ${{ env.SOURCE_BRANCH }}" >> ../artifacts/build-info.txt
        echo "配置: ${{ github.event.inputs.config_profile }}" >> ../artifacts/build-info.txt
        echo "时间: $(date)" >> ../artifacts/build-info.txt
        echo "时长: ${{ env.BUILD_DURATION }}秒" >> ../artifacts/build-info.txt

    - name: "💾 上传构建产物"
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}"
        path: artifacts/
        retention-days: 30

    - name: "📊 构建报告"
      if: always()
      run: |
        echo "=== 构建报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 构建成功!"
        else
          echo "❌ 构建失败"
        fi
