name: Universal Firmware Builder

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      
      source_branch:
        description: '源码分支'
        required: true
        default: 'auto'
        type: string
        
      config_profile:
        description: '设备配置文件路径'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      
      build_optimization:
        description: '编译优化级别'
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: 'balanced'

env:
  TZ: Asia/Shanghai
  TERM: linux

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240  # 增加到4小时
    
    steps:
    - name: Checkout config repository
      uses: actions/checkout@v4

    - name: Parse source configuration
      id: source-config
      run: |
        echo "检查固件配置目录..."
        PRESET="${{ github.event.inputs.source_preset }}"
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)
        
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)
        fi
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "使用源码: $SOURCE_URL, 分支: $BRANCH"

    - name: Prepare build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev file wget jq ncurses-term
        echo "构建环境准备完成"

    - name: Get source code
      run: |
        echo "克隆源码仓库..."
        git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" source

    - name: Initialize source
      run: |
        cd source
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply configuration
      run: |
        cd source
        cp "../firmware-config/${{ github.event.inputs.config_profile }}" .config
        make defconfig
        echo "配置应用完成"

    - name: System diagnostics
      run: |
        echo "=== 系统资源诊断 ==="
        echo "磁盘空间:"
        df -h
        echo "内存:"
        free -h
        echo "CPU:"
        nproc

    - name: Optimized build
      timeout-minutes: 230
      run: |
        cd source
        
        # 设置环境
        export TERM=linux
        export FORCE_UNSAFE_CONFIGURE=1
        
        START_TIME=$(date +%s)
        echo "开始编译 (开始时间: $(date))"
        
        # 根据优化级别选择编译策略
        case "${{ github.event.inputs.build_optimization }}" in
          "speed")
            echo "速度优先: 使用多线程编译"
            JOBS=$(nproc)
            echo "使用 $JOBS 个并行任务"
            make -j$JOBS
            ;;
          "stability")  
            echo "稳定性优先: 使用单线程详细编译"
            make V=s -j1
            ;;
          "balanced"|*)
            echo "平衡模式: 使用2线程编译"
            make -j2 V=s
            ;;
        esac
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "编译完成，耗时: ${DURATION} 秒 ($(($DURATION/60)) 分钟)"
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

    - name: Collect build artifacts
      if: success()
      run: |
        cd source
        echo "收集构建产物..."
        
        # 查找固件文件
        find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10 | while read file; do
          echo "找到固件: $file"
          ls -lh "$file"
        done
        
        mkdir -p ../artifacts
        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true

        echo "编译信息:" > ../artifacts/build-info.txt
        echo "源码: ${{ env.SOURCE_URL }}" >> ../artifacts/build-info.txt
        echo "分支: ${{ env.SOURCE_BRANCH }}" >> ../artifacts/build-info.txt
        echo "配置: ${{ github.event.inputs.config_profile }}" >> ../artifacts/build-info.txt
        echo "优化: ${{ github.event.inputs.build_optimization }}" >> ../artifacts/build-info.txt
        echo "时间: $(date)" >> ../artifacts/build-info.txt
        echo "时长: ${{ env.BUILD_DURATION }} 秒" >> ../artifacts/build-info.txt

    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: Firmware-${{ github.run_number }}
        path: artifacts
        retention-days: 30

    - name: Save partial build on failure
      if: failure()
      run: |
        cd source
        echo "编译失败，保存部分构建结果..."
        mkdir -p ../partial-build
        # 保存配置和日志
        cp .config ../partial-build/ 2>/dev/null || true
        find . -name "*.log" -type f | head -20 | xargs -I {} cp {} ../partial-build/ 2>/dev/null || true
        echo "部分构建结果已保存"

    - name: Upload partial build
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Partial-Build-${{ github.run_number }}
        path: partial-build
        retention-days: 7

    - name: Build report
      if: always()
      run: |
        echo "=== 构建报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "分支: ${{ env.SOURCE_BRANCH }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        echo "优化: ${{ github.event.inputs.build_optimization }}"
        echo "运行ID: ${{ github.run_id }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 构建成功!"
          echo "时长: ${{ env.BUILD_DURATION }} 秒"
        else
          echo "❌ 构建失败"
          echo "💡 建议:"
          echo "   - 尝试 'stability' 优化模式"
          echo "   - 检查配置文件是否过于复杂"
          echo "   - 查看部分构建结果了解进度"
        fi
