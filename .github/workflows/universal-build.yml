name: Universal Firmware Builder

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      
      source_branch:
        description: '源码分支'
        required: true
        default: 'auto'
        type: string
        
      config_profile:
        description: '设备配置文件路径'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      
      enable_debug:
        description: '启用调试模式'
        required: false
        default: true
        type: boolean

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 150
    
    steps:
    - name: Checkout config repository
      uses: actions/checkout@v4

    - name: Parse source configuration
      id: source-config
      run: |
        echo "检查固件配置目录..."
        if [ ! -d "firmware-config" ]; then
          echo "错误: firmware-config 目录未找到"
          exit 1
        fi
        
        echo "检查 repositories.json..."
        if [ ! -f "firmware-config/repositories.json" ]; then
          echo "错误: repositories.json 未找到"
          exit 1
        fi
        
        PRESET="${{ github.event.inputs.source_preset }}"
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" firmware-config/repositories.json)
        
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)
          echo "自动选择分支: $BRANCH"
        fi
        
        if [ -z "$SOURCE_URL" ]; then
          echo "错误: 无法从 repositories.json 获取源码 URL"
          exit 1
        fi
        
        echo "源码: $PRESET - $DESCRIPTION"
        echo "URL: $SOURCE_URL"
        echo "分支: $BRANCH"
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV

    - name: Prepare build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip python3-serial python3-setuptools rsync unzip zlib1g-dev file wget jq

    - name: Get source code
      run: |
        echo "克隆源码仓库: ${{ env.SOURCE_URL }}"
        git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" source

    - name: Initialize source
      run: |
        cd source
        if [ -f "feeds.conf" ] || [ -f "feeds.conf.default" ]; then
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "软件源更新完成"
        fi

    - name: Apply configuration
      run: |
        cd source
        CONFIG_FILE="../firmware-config/${{ github.event.inputs.config_profile }}"
        echo "应用配置文件: $CONFIG_FILE"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "错误: 配置文件未找到: $CONFIG_FILE"
          exit 1
        fi
        
        cp "$CONFIG_FILE" .config
        echo "配置文件应用成功"

    - name: Verify and fix conflicts
      run: |
        cd source
        echo "=== 配置验证和冲突修复 ==="
        
        # 检查已知冲突
        echo "检查 DNSMasq 配置:"
        grep -i "dnsmasq" .config || echo "未找到 DNSMasq 配置"
        
        echo "检查无线驱动配置:"
        grep -E "(ath10k|ath10k-ct)" .config || echo "未找到无线驱动配置"
        
        echo "检查 KMS 服务配置:"
        grep -E "(minidlna|ffmpeg|ffprobe)" .config || echo "KMS 服务已正确禁用"
        
        # 应用修复
        echo "应用配置修复..."
        make defconfig
        
        echo "配置验证完成"

    - name: System diagnostics
      if: github.event.inputs.enable_debug == 'true'
      run: |
        cd source
        echo "=== 系统诊断 ==="
        echo "磁盘空间:"
        df -h
        echo "内存使用:"
        free -h
        echo "CPU 核心数:"
        nproc
        echo "配置摘要:"
        grep -c "=y" .config | xargs echo "已启用包数量:"
        grep -c "is not set" .config | xargs echo "已禁用包数量:"

    - name: Compile firmware
      timeout-minutes: 150
      run: |
        cd source
        
        START_TIME=$(date +%s)
        echo "开始编译固件..."
        echo "已修复的冲突:"
        echo "  - DNSMasq: 使用 dnsmasq-full 替代 dnsmasq"
        echo "  - 无线驱动: 使用 kmod-ath10k-ct 替代 kmod-ath10k"
        echo "  - 媒体服务: 禁用 KMS 服务减小体积"
        
        if [ "${{ github.event.inputs.enable_debug }}" = "true" ]; then
          echo "🔍 调试模式: 使用详细输出和单线程编译"
          make V=s -j1
        else
          echo "⚡ 普通模式: 使用并行编译加速"
          make -j$(($(nproc) + 1)) || make -j1 V=s
        fi
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "编译完成，耗时: ${DURATION} 秒"
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

    - name: Collect build artifacts
      run: |
        cd source
        echo "收集构建产物..."
        
        # 查找固件文件
        FIRMWARE_FILES=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10)
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "找到固件文件:"
          echo "$FIRMWARE_FILES"
          echo "固件大小:"
          ls -lh $(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -1) 2>/dev/null || echo "无法获取文件大小"
        else
          echo "未找到标准固件文件"
          echo "bin/targets 中的可用文件:"
          find bin/targets -type f 2>/dev/null | head -20
        fi
        
        # 创建产物目录
        mkdir -p ../artifacts
        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true

        # 创建构建信息文件
        echo "源码: ${{ env.SOURCE_URL }}" > ../artifacts/build-info.txt
        echo "分支: ${{ env.SOURCE_BRANCH }}" >> ../artifacts/build-info.txt
        echo "配置: ${{ github.event.inputs.config_profile }}" >> ../artifacts/build-info.txt
        echo "时间: $(date)" >> ../artifacts/build-info.txt
        echo "编译时长: ${{ env.BUILD_DURATION }} 秒" >> ../artifacts/build-info.txt
        echo "GitHub Run ID: ${{ github.run_id }}" >> ../artifacts/build-info.txt
        echo "修复的冲突: DNSMasq, 无线驱动, KMS媒体服务" >> ../artifacts/build-info.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Firmware-${{ github.run_number }}-${{ github.run_attempt }}
        path: artifacts
        retention-days: 30

    - name: Build report
      if: always()
      run: |
        echo "=== 构建报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        echo "运行ID: ${{ github.run_id }}"
        echo "尝试: ${{ github.run_attempt }}"
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 构建成功!"
          echo "编译时长: ${{ env.BUILD_DURATION }} 秒"
          echo "🎯 已修复的冲突:"
          echo "   - DNSMasq 冲突"
          echo "   - 无线驱动冲突" 
          echo "   - KMS 媒体服务"
        else
          echo "❌ 构建失败"
          echo "请检查编译日志获取详细信息"
        fi
