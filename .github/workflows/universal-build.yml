name: "Universal Firmware Builder - Debug Stage 2"

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库 (ImmortalWrt功能丰富/OpenWrt官方纯净/LEDE集成度高)'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      source_branch:
        description: '源码分支 (auto=自动推荐稳定分支，或手动指定分支名)'
        required: true
        default: 'auto'
        type: string
      config_profile:
        description: '设备配置文件路径 - 查看 firmware-config/configs-list.md 获取可用文件列表'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      build_optimization:
        description: '编译优化策略'
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: 'balanced'
      toolchain_strategy:
        description: '工具链策略 (prebuilt=预编译最快/local=本地编译最稳/auto=自动选择)'
        required: true
        type: choice
        options:
          - prebuilt
          - local
          - auto
        default: 'auto'
      enable_custom_features:
        description: '启用自定义功能 (自定义脚本和预编译IPK包)'
        required: false
        default: true
        type: boolean

env:
  TZ: "Asia/Shanghai"
  TERM: "linux"
  SOURCE_DIR: "/mnt/source"
  ARTIFACTS_DIR: "/mnt/artifacts"
  CCACHE_DIR: "/home/runner/ccache"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    
    steps:
    - name: "📥 检出仓库"
      uses: actions/checkout@v4

    - name: "💾 系统资源分析与清理"
      run: |
        echo "=== 系统资源分析 ==="
        df -h
        echo "CPU 核心数: $(nproc)"
        free -h
        
        echo "🧹 清理可能存在的旧交换文件..."
        sudo swapoff /mnt/swapfile 2>/dev/null || true
        sudo swapoff /swapfile 2>/dev/null || true
        sudo rm -f /mnt/swapfile 2>/dev/null || true
        sudo rm -f /swapfile 2>/dev/null || true
        
        echo "✅ 环境清理完成"

    - name: "🔧 设置工作环境与权限修复"
      run: |
        echo "设置编译环境..."
        
        # 创建 /mnt 目录并设置正确权限
        echo "设置 /mnt 目录权限..."
        sudo mkdir -p ${{ env.SOURCE_DIR }}
        sudo mkdir -p ${{ env.ARTIFACTS_DIR }}
        sudo chown -R runner:runner ${{ env.SOURCE_DIR }}
        sudo chown -R runner:runner ${{ env.ARTIFACTS_DIR }}
        sudo chmod -R 755 ${{ env.SOURCE_DIR }}
        sudo chmod -R 755 ${{ env.ARTIFACTS_DIR }}
        
        # 创建用户目录的ccache
        echo "设置CCache目录..."
        mkdir -p ${{ env.CCACHE_DIR }}
        chmod -R 755 ${{ env.CCACHE_DIR }}
        
        echo "🔄 安全创建大容量交换文件..."
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192 status=progress
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        echo "✅ 8GB交换文件已启用"
        
        echo "⚡ 优化系统性能设置..."
        ulimit -n 65536
        export FORCE_UNSAFE_CONFIGURE=1

    - name: "🔍 检查目录结构"
      run: |
        echo "=== 当前目录结构 ==="
        pwd
        ls -la
        echo "=== firmware-config 目录内容 ==="
        ls -la firmware-config/
        echo "=== 检查 repositories.json ==="
        if [ -f "firmware-config/repositories.json" ]; then
          echo "✅ repositories.json 存在"
          cat firmware-config/repositories.json
        else
          echo "❌ repositories.json 不存在"
          echo "请在 firmware-config 目录下创建 repositories.json 文件"
          exit 1
        fi

    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        echo "正在解析源码配置..."
        
        if [ ! -f "firmware-config/repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          exit 1
        fi
        
        PRESET="${{ github.event.inputs.source_preset }}"
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" firmware-config/repositories.json)
        
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)
        fi
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "✅ 源码配置: $PRESET - $DESCRIPTION, 分支: $BRANCH"

    - name: "🛠️ 增强编译依赖安装"
      run: |
        echo "安装完整编译依赖包..."
        sudo apt-get update
        
        # 基础编译工具
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip python3-setuptools rsync unzip zlib1g-dev file wget jq ccache
        
        # 修复工具链问题 - 安装必要的工具
        echo "安装工具链依赖..."
        sudo apt-get install -y m4 help2man texinfo texi2html libtool-bin automake autoconf pkg-config
        
        # 修复 flex/m4 问题
        echo "安装 flex 和 bison 相关工具..."
        sudo apt-get install -y flex bison byacc
        
        # 其他可能需要的依赖
        sudo apt-get install -y subversion mercurial curl cmake ninja-build libelf-dev libssl-dev zlib1g-dev libc6-dev
        
        # 检查关键工具版本
        echo "=== 关键工具版本检查 ==="
        flex --version || echo "flex 未安装"
        bison --version || echo "bison 未安装"
        m4 --version || echo "m4 未安装"
        gcc --version || echo "gcc 未安装"
        
        echo "✅ 依赖安装完成"

    - name: "⚡ 设置编译缓存和优化"
      run: |
        echo "⚡ 设置编译缓存..."
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache -M 8G
        ccache -o compression=true
        ccache -o compression_level=6
        ccache -o max_files=100000
        
        echo "📊 初始CCache统计:"
        ccache -s
        
        # 设置环境变量
        echo "CCACHE_DIR=${{ env.CCACHE_DIR }}" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV
        
        echo "✅ 缓存设置完成"

    - name: "📥 获取源代码"
      id: clone-source
      run: |
        echo "正在克隆源码仓库..."
        cd ${{ env.SOURCE_DIR }}
        
        CLONE_SUCCESS=false
        echo "🔍 尝试使用首选分支: ${{ env.SOURCE_BRANCH }}"
        
        if git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" . 2>/dev/null; then
          echo "✅ 使用首选分支克隆成功"
          CLONE_SUCCESS=true
          ACTUAL_BRANCH="${{ env.SOURCE_BRANCH }}"
        else
          echo "⚠️ 尝试备选分支..."
          if [ "${{ env.SOURCE_BRANCH }}" = "main" ]; then
            ALTERNATIVE_BRANCH="master"
          else
            ALTERNATIVE_BRANCH="main"
          fi
          
          if git clone --depth 1 --branch "$ALTERNATIVE_BRANCH" "${{ env.SOURCE_URL }}" . 2>/dev/null; then
            echo "✅ 使用备选分支克隆成功"
            CLONE_SUCCESS=true
            ACTUAL_BRANCH="$ALTERNATIVE_BRANCH"
          else
            if git clone --depth 1 "${{ env.SOURCE_URL }}" . 2>/dev/null; then
              echo "✅ 无分支克隆成功"
              CLONE_SUCCESS=true
              ACTUAL_BRANCH=$(git branch --show-current)
            fi
          fi
        fi
        
        if [ "$CLONE_SUCCESS" = "false" ]; then
          echo "❌ 克隆失败"
          exit 1
        fi
        
        echo "ACTUAL_BRANCH=$ACTUAL_BRANCH" >> $GITHUB_ENV
        echo "✅ 源码克隆完成: $ACTUAL_BRANCH"

    - name: "💾 源码克隆后空间检查"
      run: |
        echo "=== 源码克隆后磁盘空间检查 ==="
        df -h
        
        AVAILABLE_GB=$(df /mnt | awk 'NR==2 {gsub("G","",$4); print int($4)}')
        echo "可用空间: ${AVAILABLE_GB}GB"
        
        if [ "$AVAILABLE_GB" -lt 20 ]; then
          echo "⚠️ 警告: 磁盘空间不足20GB，编译可能会失败"
        else
          echo "✅ 磁盘空间充足"
        fi

    - name: "🔄 源码初始化与依赖修复"
      timeout-minutes: 45
      id: feeds-update
      run: |
        cd ${{ env.SOURCE_DIR }}
        
        START_TIME=$(date +%s)
        echo "开始源码初始化..."
        
        # 首先检查 feeds.conf 或 feeds.conf.default
        echo "检查feeds配置..."
        if [ -f "feeds.conf" ]; then
          echo "使用 feeds.conf"
          cat feeds.conf
        elif [ -f "feeds.conf.default" ]; then
          echo "使用 feeds.conf.default"
          cp feeds.conf.default feeds.conf
          cat feeds.conf
        fi
        
        echo "步骤1: 更新feeds..."
        if ! ./scripts/feeds update -a; then
          echo "❌ Feeds更新失败，尝试修复..."
          # 尝试清除缓存重新更新
          rm -rf feeds/lost+found
          ./scripts/feeds clean
          ./scripts/feeds update -a || exit 1
        fi
        
        echo "步骤2: 安装feeds..."
        if ! ./scripts/feeds install -a; then
          echo "❌ Feeds安装失败，尝试修复..."
          # 重新更新并安装
          ./scripts/feeds update -a
          ./scripts/feeds install -a || exit 1
        fi
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        if [ "$DURATION" -gt 600 ]; then
          echo "⏱️ Feeds更新耗时: ${DURATION}秒 (较长)"
          echo "feeds_duration=$DURATION" >> $GITHUB_ENV
        elif [ "$DURATION" -gt 300 ]; then
          echo "⏱️ Feeds更新耗时: ${DURATION}秒"
        fi
        
        echo "✅ Feeds更新完成"

    - name: "🎨 应用配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        CONFIG_FILE="$GITHUB_WORKSPACE/firmware-config/${{ github.event.inputs.config_profile }}"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 配置文件不存在: $CONFIG_FILE"
          exit 1
        fi
        
        cp "$CONFIG_FILE" .config
        echo "✅ 配置应用完成"

    - name: "🔧 性能与兼容性优化配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "应用性能与兼容性优化配置..."
        
        # 禁用调试信息以减少空间占用
        sed -i 's/CONFIG_DEBUG=y/# CONFIG_DEBUG is not set/' .config 2>/dev/null || true
        sed -i 's/CONFIG_DEVEL=y/# CONFIG_DEVEL is not set/' .config 2>/dev/null || true
        sed -i 's/CONFIG_BUILD_LOG=y/# CONFIG_BUILD_LOG is not set/' .config 2>/dev/null || true
        
        # 启用ccache
        echo "CONFIG_CCACHE=y" >> .config
        
        # 自动处理配置
        echo "运行 oldconfig..."
        yes "" | make oldconfig >/dev/null 2>&1 || echo "oldconfig 完成"
        
        echo "✅ 性能优化配置完成"

    - name: "🛠️ 强制重新编译工具链"
      timeout-minutes: 120
      id: toolchain-setup
      run: |
        cd ${{ env.SOURCE_DIR }}
        
        START_TIME=$(date +%s)
        
        echo "🧹 清理可能存在的旧工具链..."
        rm -rf staging_dir/toolchain-* build_dir/toolchain-*
        
        # 创建工具链编译日志目录
        TOOLCHAIN_LOGS_DIR="/home/runner/toolchain-logs"
        mkdir -p $TOOLCHAIN_LOGS_DIR
        
        # 首先编译 host 工具 - 使用详细输出以便调试
        echo "🔧 编译 host 工具..."
        if ! make tools/compile -j$(($(nproc) - 1)) V=s 2>&1 | tee $TOOLCHAIN_LOGS_DIR/host-tools.log; then
          echo "❌ Host工具编译失败，尝试单线程编译..."
          if ! make tools/compile -j1 V=s 2>&1 | tee $TOOLCHAIN_LOGS_DIR/host-tools-single.log; then
            echo "❌ Host工具单线程编译也失败"
            echo "=== 错误分析 ==="
            tail -50 $TOOLCHAIN_LOGS_DIR/host-tools-single.log | grep -i "error\|failed" | tail -20
            exit 1
          fi
        fi
        
        echo "✅ Host工具编译完成"
        
        # 检查 host 工具是否完整
        echo "🔍 检查 host 工具..."
        if [ ! -f "staging_dir/host/bin/m4" ]; then
          echo "❌ 错误: host m4 工具未找到"
          exit 1
        fi
        if [ ! -f "staging_dir/host/bin/flex" ]; then
          echo "❌ 错误: host flex 工具未找到"
          exit 1
        fi
        
        # 强制使用本地编译工具链策略
        echo "🔧 强制使用本地编译工具链策略..."
        echo "result=local" >> $GITHUB_OUTPUT
        
        echo "🔧 编译本地工具链 (详细输出)..."
        if ! make toolchain/compile -j$(($(nproc) - 1)) V=s 2>&1 | tee $TOOLCHAIN_LOGS_DIR/toolchain-compile.log; then
          echo "❌ 工具链编译失败，尝试单线程编译..."
          if ! make toolchain/compile -j1 V=s 2>&1 | tee $TOOLCHAIN_LOGS_DIR/toolchain-compile-single.log; then
            echo "❌ 工具链单线程编译也失败"
            echo "=== 错误分析 ==="
            tail -50 $TOOLCHAIN_LOGS_DIR/toolchain-compile-single.log | grep -i "error\|failed" | tail -20
            
            # 检查是否有磁盘空间问题
            echo "=== 磁盘空间检查 ==="
            df -h
            echo "=== 内存和交换空间 ==="
            free -h
            
            exit 1
          fi
        fi
        
        echo "✅ 本地工具链编译完成"
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        if [ "$DURATION" -gt 1200 ]; then
          echo "⏱️ 工具链编译耗时: ${DURATION}秒 (较长)"
          echo "toolchain_duration=$DURATION" >> $GITHUB_ENV
        elif [ "$DURATION" -gt 600 ]; then
          echo "⏱️ 工具链编译耗时: ${DURATION}秒"
        fi

    - name: "🔍 完整工具链验证"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "=== 完整工具链验证 ==="
        
        # 检查 staging_dir 结构
        echo "=== staging_dir 结构 ==="
        find staging_dir/ -type d -maxdepth 2 | sort
        
        # 检查关键工具
        echo ""
        echo "=== Host 工具检查 ==="
        HOST_M4=$(find staging_dir/host/bin -name "m4" -type f 2>/dev/null)
        HOST_FLEX=$(find staging_dir/host/bin -name "flex" -type f 2>/dev/null)
        HOST_BISON=$(find staging_dir/host/bin -name "bison" -type f 2>/dev/null)
        
        echo "Host M4: $HOST_M4"
        echo "Host FLEX: $HOST_FLEX" 
        echo "Host BISON: $HOST_BISON"
        
        if [ -z "$HOST_M4" ]; then
          echo "❌ 错误: host m4 工具未找到"
          exit 1
        fi
        if [ -z "$HOST_FLEX" ]; then
          echo "❌ 错误: host flex 工具未找到"
          exit 1
        fi
        
        echo ""
        echo "=== 目标工具链检查 ==="
        # 查找目标工具链目录
        TOOLCHAIN_DIRS=$(find staging_dir/ -name "toolchain-*" -type d | grep -v host)
        echo "找到工具链目录: $TOOLCHAIN_DIRS"
        
        # 在目标工具链中查找交叉编译器
        TARGET_GCC=$(find staging_dir/toolchain-*/bin/ -name "*gcc" -type f 2>/dev/null | head -1)
        TARGET_STRIP=$(find staging_dir/toolchain-*/bin/ -name "*strip" -type f 2>/dev/null | head -1)
        
        echo "目标 GCC: $TARGET_GCC"
        echo "目标 STRIP: $TARGET_STRIP"
        
        if [ -z "$TARGET_GCC" ]; then
          echo "❌ 严重错误: 未找到目标架构交叉编译器!"
          echo "=== 详细目录结构 ==="
          for dir in $TOOLCHAIN_DIRS; do
            echo "检查目录: $dir"
            if [ -d "$dir" ]; then
              echo "目录内容:"
              ls -la "$dir"
              if [ -d "$dir/bin" ]; then
                echo "bin 目录内容:"
                ls -la "$dir/bin/"
              else
                echo "⚠️ 没有 bin 目录"
              fi
            fi
          done
          
          # 检查编译日志中的错误
          TOOLCHAIN_LOGS_DIR="/home/runner/toolchain-logs"
          if [ -f "$TOOLCHAIN_LOGS_DIR/toolchain-compile.log" ]; then
            echo "=== 工具链编译错误 ==="
            tail -100 "$TOOLCHAIN_LOGS_DIR/toolchain-compile.log" | grep -i "error\|failed" | tail -20
          fi
          
          exit 1
        fi
        
        # 检查编译器是否可执行
        if [ -x "$TARGET_GCC" ]; then
          echo "✅ 交叉编译器可执行"
          echo "编译器版本:"
          $TARGET_GCC --version | head -1 || echo "无法获取版本信息"
        else
          echo "⚠️ 交叉编译器不可执行，尝试修复权限..."
          chmod +x "$TARGET_GCC" || echo "权限修复失败"
        fi
        
        echo ""
        echo "✅ 工具链验证完成 - 工具链完整"

    - name: "📦 收集工具链日志"
      if: always()
      run: |
        echo "收集工具链编译日志..."
        TOOLCHAIN_LOGS_DIR="/home/runner/toolchain-logs"
        mkdir -p ${{ env.ARTIFACTS_DIR }}/toolchain-logs
        
        if [ -d "$TOOLCHAIN_LOGS_DIR" ]; then
          cp -r $TOOLCHAIN_LOGS_DIR/* ${{ env.ARTIFACTS_DIR }}/toolchain-logs/ 2>/dev/null || true
          echo "✅ 工具链日志收集完成"
        else
          echo "⚠️ 无工具链日志目录"
        fi

    - name: "📦 处理预编译IPK包"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd ${{ env.SOURCE_DIR }}
        IPK_DIR="$GITHUB_WORKSPACE/firmware-config/custom-features/prebuilt-ipks"
        
        if [ -d "$IPK_DIR" ]; then
          IPK_FILES=$(find "$IPK_DIR" -name "*.ipk" -type f)
          if [ -n "$IPK_FILES" ]; then
            mkdir -p package/base-files/files/usr/lib/opkg/custom
            for ipk in $IPK_FILES; do
              echo "📥 复制IPK包: $(basename "$ipk")"
              cp "$ipk" package/base-files/files/usr/lib/opkg/custom/
            done
            echo "✅ 预编译IPK包处理完成"
          fi
        fi

    - name: "🛠️ 执行自定义脚本"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd ${{ env.SOURCE_DIR }}
        SCRIPTS_DIR="$GITHUB_WORKSPACE/firmware-config/custom-features/scripts"
        
        if [ -d "$SCRIPTS_DIR" ]; then
          for script in $(find "$SCRIPTS_DIR" -name "*.sh" -type f | sort); do
            echo "执行脚本: $(basename "$script")"
            chmod +x "$script"
            # 设置超时防止脚本挂起
            timeout 300 bash "$script" || echo "⚠️ 脚本执行可能超时或失败，但继续构建流程"
          done
        fi

    - name: "🔍 验证配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "验证配置文件..."
        make defconfig >/dev/null 2>&1 || echo "defconfig 完成"
        echo "✅ 配置验证完成"

    - name: "💾 编译前关键空间检查"
      run: |
        echo "=== 编译前关键空间检查 ==="
        echo "根分区 (/):"
        df -h /
        echo ""
        echo "数据分区 (/mnt):"
        df -h /mnt
        
        AVAILABLE_GB=$(df /mnt | awk 'NR==2 {gsub("G","",$4); print int($4)}')
        echo ""
        echo "可用空间: ${AVAILABLE_GB}GB"
        
        if [ "$AVAILABLE_GB" -lt 15 ]; then
          echo "❌ 错误: 磁盘空间不足15GB，无法安全编译"
          exit 1
        elif [ "$AVAILABLE_GB" -lt 25 ]; then
          echo "⚠️ 警告: 磁盘空间紧张 (${AVAILABLE_GB}GB)，编译可能会失败"
        else
          echo "✅ 磁盘空间充足，可以开始编译"
        fi

    - name: "🏗️ 智能编译固件 - 调试阶段2"
      timeout-minutes: 240
      id: compile-firmware
      run: |
        cd ${{ env.SOURCE_DIR }}
        export TERM=linux
        export FORCE_UNSAFE_CONFIGURE=1
        
        # 设置性能优化环境
        export CCACHE_DIR="${{ env.CCACHE_DIR }}"
        export CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros
        export CCACHE_MAXSIZE=8G
        
        # 获取CPU核心数
        CPU_CORES=$(nproc)
        echo "💻 可用CPU核心数: $CPU_CORES"
        
        # 创建编译日志目录
        BUILD_LOGS_DIR="/home/runner/build-logs"
        mkdir -p $BUILD_LOGS_DIR
        
        START_TIME=$(date +%s)
        
        echo "🚀 开始智能编译..."
        echo "📊 编译参数:"
        echo "  - 工具链策略: ${{ steps.toolchain-setup.outputs.result }}"
        echo "  - 编译优化: ${{ github.event.inputs.build_optimization }}"
        echo "  - 自定义功能: ${{ github.event.inputs.enable_custom_features }}"
        echo "  - 实际分支: ${{ env.ACTUAL_BRANCH }}"
        echo "  - CPU核心: $CPU_CORES"
        
        # 设置编译结果变量
        COMPILE_SUCCESS=false
        BUILD_EXIT_CODE=1
        
        # 智能编译策略 - 使用严格错误处理
        case "${{ github.event.inputs.build_optimization }}" in
          "speed")
            echo "🚀 极速模式: 使用 $CPU_CORES 线程单阶段编译"
            {
              echo "📦 单阶段快速编译"
              if make -j$CPU_CORES CC="ccache gcc" CXX="ccache g++"; then
                echo "✅ 编译命令执行完成"
                COMPILE_SUCCESS=true
                BUILD_EXIT_CODE=0
              else
                echo "❌ 编译命令执行失败"
                COMPILE_SUCCESS=false
                BUILD_EXIT_CODE=$?
              fi
            } | tee $BUILD_LOGS_DIR/speed.log
            ;;
          "stability")
            echo "🛡️ 稳定模式: 使用 $((CPU_CORES - 1)) 线程分阶段编译"
            {
              set -e  # 严格错误处理，任何命令失败立即退出
              
              echo "🔧 阶段1: 编译内核和基础包 (详细输出)"
              make target/linux/compile package/kernel/linux/compile -j$((CPU_CORES - 1)) V=s CC="ccache gcc" CXX="ccache g++"
              
              # 阶段1后空间检查
              echo "=== 阶段1后磁盘空间 ==="
              df -h /mnt
              
              echo "📦 阶段2: 编译网络和系统包 (详细输出用于调试)"
              make package/network/compile package/system/compile -j1 V=s CC="ccache gcc" CXX="ccache g++"
              
              # 阶段2后空间检查
              echo "=== 阶段2后磁盘空间 ==="
              df -h /mnt
              
              echo "🔧 阶段3: 最终组装"
              make target/install -j$((CPU_CORES - 1)) CC="ccache gcc" CXX="ccache g++"
              
              COMPILE_SUCCESS=true
              BUILD_EXIT_CODE=0
              
            } 2>&1 | tee $BUILD_LOGS_DIR/stability.log
            ;;
          "balanced"|*)
            echo "⚖️ 平衡模式: 使用 $CPU_CORES 线程智能分阶段编译"
            {
              set -e  # 严格错误处理，任何命令失败立即退出
              
              # 阶段1: 内核和关键驱动 - 详细输出便于诊断
              echo "🔧 阶段1: 编译内核和关键驱动 (详细输出)"
              PHASE1_START=$(date +%s)
              make target/linux/compile package/kernel/linux/compile -j$CPU_CORES V=s CC="ccache gcc" CXX="ccache g++"
              PHASE1_END=$(date +%s)
              PHASE1_DURATION=$((PHASE1_END - PHASE1_START))
              echo "阶段1完成，耗时: ${PHASE1_DURATION}秒"
              
              # 阶段1后空间检查
              echo "=== 阶段1后磁盘空间 ==="
              df -h /mnt
              
              # 阶段2: 网络和系统包 - 使用详细输出和单线程进行调试
              echo "📦 阶段2: 编译网络和系统包 (详细输出+单线程用于调试)"
              PHASE2_START=$(date +%s)
              make package/network/compile package/system/compile -j1 V=s CC="ccache gcc" CXX="ccache g++"
              PHASE2_END=$(date +%s)
              PHASE2_DURATION=$((PHASE2_END - PHASE2_START))
              echo "阶段2完成，耗时: ${PHASE2_DURATION}秒"
              
              # 阶段2后空间检查
              echo "=== 阶段2后磁盘空间 ==="
              df -h /mnt
              
              # 阶段3: 剩余包和最终组装
              echo "🔧 阶段3: 编译剩余包并最终组装"
              PHASE3_START=$(date +%s)
              make package/compile target/install -j$CPU_CORES CC="ccache gcc" CXX="ccache g++"
              PHASE3_END=$(date +%s)
              PHASE3_DURATION=$((PHASE3_END - PHASE3_START))
              echo "阶段3完成，耗时: ${PHASE3_DURATION}秒"
              
              COMPILE_SUCCESS=true
              BUILD_EXIT_CODE=0
              
            } 2>&1 | tee $BUILD_LOGS_DIR/balanced.log
            
            # 记录阶段时长
            if [ "$COMPILE_SUCCESS" = "true" ]; then
              echo "PHASE1_DURATION=$PHASE1_DURATION" >> $GITHUB_ENV
              echo "PHASE2_DURATION=$PHASE2_DURATION" >> $GITHUB_ENV
              echo "PHASE3_DURATION=$PHASE3_DURATION" >> $GITHUB_ENV
            fi
            ;;
        esac
        
        # 显示ccache统计
        echo "📊 CCache 统计:"
        ccache -s
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV
        
        if [ "$COMPILE_SUCCESS" = "true" ] && [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          echo "🎉 编译成功完成!"
          
          # 记录编译总时长
          if [ "$DURATION" -gt 3600 ]; then
            echo "⏱️ 总编译耗时: ${DURATION}秒 ($(($DURATION/60))分钟) - 较长"
          else
            echo "⏱️ 编译耗时: ${DURATION}秒 ($(($DURATION/60))分钟)"
          fi
          
          exit 0
        else
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          echo "❌ 编译失败"
          
          # 详细的错误分析
          echo "=== 详细错误分析 ==="
          for logfile in $BUILD_LOGS_DIR/*.log; do
            if [ -f "$logfile" ]; then
              echo "分析日志: $(basename $logfile)"
              echo "最后错误信息:"
              tail -200 "$logfile" | grep -i "error\|failed\|undefined\|missing\|no such file" | tail -50 || echo "  无明确错误信息"
              echo "----------------------------------------"
            fi
          done
          
          # 记录编译总时长
          echo "⏱️ 编译失败于: ${DURATION}秒"
          exit 1
        fi

    - name: "💾 编译后最终空间检查"
      if: env.BUILD_STATUS == 'success'
      run: |
        echo "=== 编译后最终空间检查 ==="
        echo "根分区 (/):"
        df -h /
        echo ""
        echo "数据分区 (/mnt):"
        df -h /mnt
        
        echo ""
        echo "📊 空间使用总结:"
        du -sh ${{ env.SOURCE_DIR }}/bin/ 2>/dev/null || echo "无法获取输出目录大小"

    - name: "📋 编译诊断报告"
      if: always()
      run: |
        echo "=== 编译诊断报告 ==="
        echo "构建状态: ${{ env.BUILD_STATUS || 'unknown' }}"
        
        BUILD_LOGS_DIR="/home/runner/build-logs"
        
        # 检查日志文件
        if ls $BUILD_LOGS_DIR/*.log 2>/dev/null; then
          echo "📁 可用日志文件:"
          ls -la $BUILD_LOGS_DIR/
          
          # 显示关键统计
          for logfile in $BUILD_LOGS_DIR/*.log; do
            echo ""
            echo "📊 $(basename $logfile) 统计:"
            echo "  总行数: $(wc -l < "$logfile")"
            echo "  错误数: $(grep -c -i "error" "$logfile" || echo 0)"
            echo "  警告数: $(grep -c -i "warning" "$logfile" || echo 0)"
            echo "  失败数: $(grep -c -i "failed" "$logfile" || echo 0)"
            echo "  文件缺失: $(grep -c -i "no such file" "$logfile" || echo 0)"
          done
        else
          echo "⚠️ 无编译日志文件"
        fi

    - name: "📦 收集构建产物和诊断信息"
      if: always()
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "收集编译产物和诊断信息..."
        
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        
        # 收集固件文件（仅在成功时）
        if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
          find bin/targets -type f \( -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" \) -exec cp --parents {} ${{ env.ARTIFACTS_DIR }}/ \; 2>/dev/null || true
        fi
        
        # 收集编译日志
        BUILD_LOGS_DIR="/home/runner/build-logs"
        cp -r $BUILD_LOGS_DIR ${{ env.ARTIFACTS_DIR }}/ 2>/dev/null || true
        
        # 收集配置信息
        cp .config ${{ env.ARTIFACTS_DIR }}/config 2>/dev/null || true
        
        # 收集工具链信息用于调试
        {
          echo "=== 工具链信息 ==="
          echo "Host 工具:"
          find staging_dir/host/bin -type f 2>/dev/null | sort
          echo ""
          echo "目标工具链:"
          find staging_dir/toolchain-*/bin -type f 2>/dev/null | sort
        } > ${{ env.ARTIFACTS_DIR }}/toolchain-info.txt 2>/dev/null || true
        
        # 收集关键构建状态
        {
          echo "=== 构建状态报告 ==="
          echo "构建时间: $(date)"
          echo "编译状态: ${{ env.BUILD_STATUS || 'unknown' }}"
          echo "编译时长: ${{ env.BUILD_DURATION || 'N/A' }}秒"
          echo "源码分支: ${{ env.ACTUAL_BRANCH }}"
          echo "配置: ${{ github.event.inputs.config_profile }}"
          echo "优化策略: ${{ github.event.inputs.build_optimization }}"
          echo "工具链: ${{ steps.toolchain-setup.outputs.result }}"
          echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}"
        } > ${{ env.ARTIFACTS_DIR }}/build-report.txt
        
        # 复制到工作目录
        mkdir -p $GITHUB_WORKSPACE/artifacts
        cp -r ${{ env.ARTIFACTS_DIR }}/* $GITHUB_WORKSPACE/artifacts/ 2>/dev/null || true
        
        echo "✅ 产物和诊断信息收集完成"

    - name: "🧹 安全清理环境"
      if: always()
      run: |
        echo "安全清理编译环境..."
        sudo swapoff /mnt/swapfile 2>/dev/null || true
        sudo rm -rf ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} /mnt/swapfile 2>/dev/null || true
        rm -rf ${{ env.CCACHE_DIR }} 2>/dev/null || true
        rm -rf /home/runner/build-logs 2>/dev/null || true
        rm -rf /home/runner/toolchain-logs 2>/dev/null || true
        echo "✅ 环境清理完成"

    - name: "💾 上传构建产物"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}-${{ env.ACTUAL_BRANCH }}-${{ env.BUILD_STATUS || 'unknown' }}"
        path: artifacts
        retention-days: 30

    - name: "📊 最终编译报告"
      if: always()
      run: |
        echo "=== 最终编译报告 ==="
        echo "状态: ${{ job.status }}"
        echo "编译状态: ${{ env.BUILD_STATUS || 'unknown' }}"
        
        if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
          echo "🎉 构建成功!"
          echo "⏱️ 编译时长: ${{ env.BUILD_DURATION }}秒"
        else
          echo "❌ 构建失败"
          echo "🔍 请查看 Artifacts 中的详细日志和诊断信息"
          echo "📁 特别关注 build-logs/ 目录中的阶段2编译日志"
        fi
