name: "Universal Firmware Builder"

on:
  workflow_dispatch:
    inputs:
      source_preset:
        description: '选择源码库 (ImmortalWrt功能丰富/OpenWrt官方纯净/LEDE集成度高)'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      source_branch:
        description: '源码分支 (auto=自动推荐稳定分支，或手动指定分支名)'
        required: true
        default: 'auto'
        type: string
      config_profile:
        description: '设备配置文件路径 - 查看 firmware-config/configs-list.md 获取可用文件列表'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      build_optimization:
        description: '编译优化策略'
        required: true
        type: choice
        options:
          - balanced
          - speed
          - stability
        default: 'balanced'
      toolchain_strategy:
        description: '工具链策略 (prebuilt=预编译最快/local=本地编译最稳/auto=自动选择)'
        required: true
        type: choice
        options:
          - prebuilt
          - local
          - auto
        default: 'auto'
      enable_custom_features:
        description: '启用自定义功能 (自定义脚本和预编译IPK包)'
        required: false
        default: true
        type: boolean

env:
  TZ: "Asia/Shanghai"
  TERM: "linux"
  SOURCE_DIR: "/mnt/source"
  ARTIFACTS_DIR: "/mnt/artifacts"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    
    steps:
    - name: "📥 检出仓库"
      uses: actions/checkout@v4

    - name: "💾 系统资源分析与清理"
      run: |
        echo "=== 系统资源分析 ==="
        df -h
        echo "CPU 核心数: $(nproc)"
        free -h
        
        echo "🧹 清理可能存在的旧交换文件..."
        # 安全地清理交换文件
        sudo swapoff /mnt/swapfile 2>/dev/null || true
        sudo swapoff /swapfile 2>/dev/null || true
        sudo rm -f /mnt/swapfile 2>/dev/null || true
        sudo rm -f /swapfile 2>/dev/null || true
        
        echo "✅ 环境清理完成"

    - name: "🔧 设置高性能工作环境"
      run: |
        echo "设置高性能编译环境..."
        sudo mkdir -p ${{ env.SOURCE_DIR }}
        sudo mkdir -p ${{ env.ARTIFACTS_DIR }}
        sudo chown -R runner:runner ${{ env.SOURCE_DIR }}
        sudo chown -R runner:runner ${{ env.ARTIFACTS_DIR }}
        
        echo "🔄 安全创建大容量交换文件..."
        # 使用dd命令替代fallocate，避免"Text file busy"错误
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192 status=progress
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        echo "✅ 8GB交换文件已启用"
        
        echo "⚡ 优化系统性能设置..."
        ulimit -n 65536
        export FORCE_UNSAFE_CONFIGURE=1

    - name: "🔍 检查目录结构"
      run: |
        echo "=== 当前目录结构 ==="
        pwd
        ls -la
        echo "=== firmware-config 目录内容 ==="
        ls -la firmware-config/
        echo "=== 检查 repositories.json ==="
        if [ -f "firmware-config/repositories.json" ]; then
          echo "✅ repositories.json 存在"
          cat firmware-config/repositories.json
        else
          echo "❌ repositories.json 不存在"
          echo "请在 firmware-config 目录下创建 repositories.json 文件"
          exit 1
        fi

    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        echo "正在解析源码配置..."
        
        if [ ! -f "firmware-config/repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          exit 1
        fi
        
        PRESET="${{ github.event.inputs.source_preset }}"
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" firmware-config/repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" firmware-config/repositories.json)
        
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" firmware-config/repositories.json)
        fi
        
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "✅ 源码配置: $PRESET - $DESCRIPTION, 分支: $BRANCH"

    - name: "🧹 准备高性能构建环境"
      run: |
        echo "安装编译依赖包..."
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip python3-setuptools rsync unzip zlib1g-dev file wget jq ccache
        
        echo "⚡ 设置编译缓存..."
        export CCACHE_DIR="/mnt/ccache"
        mkdir -p $CCACHE_DIR
        ccache -M 5G
        ccache -s
        
        echo "✅ 高性能构建环境准备完成"

    - name: "📥 高性能源码获取"
      id: clone-source
      run: |
        echo "正在克隆源码仓库到高速分区..."
        cd ${{ env.SOURCE_DIR }}
        
        CLONE_SUCCESS=false
        echo "🔍 尝试使用首选分支: ${{ env.SOURCE_BRANCH }}"
        
        if git clone --depth 1 --branch "${{ env.SOURCE_BRANCH }}" "${{ env.SOURCE_URL }}" . 2>/dev/null; then
          echo "✅ 使用首选分支克隆成功"
          CLONE_SUCCESS=true
          ACTUAL_BRANCH="${{ env.SOURCE_BRANCH }}"
        else
          echo "⚠️ 尝试备选分支..."
          if [ "${{ env.SOURCE_BRANCH }}" = "main" ]; then
            ALTERNATIVE_BRANCH="master"
          else
            ALTERNATIVE_BRANCH="main"
          fi
          
          if git clone --depth 1 --branch "$ALTERNATIVE_BRANCH" "${{ env.SOURCE_URL }}" . 2>/dev/null; then
            echo "✅ 使用备选分支克隆成功"
            CLONE_SUCCESS=true
            ACTUAL_BRANCH="$ALTERNATIVE_BRANCH"
          else
            if git clone --depth 1 "${{ env.SOURCE_URL }}" . 2>/dev/null; then
              echo "✅ 无分支克隆成功"
              CLONE_SUCCESS=true
              ACTUAL_BRANCH=$(git branch --show-current)
            fi
          fi
        fi
        
        if [ "$CLONE_SUCCESS" = "false" ]; then
          echo "❌ 克隆失败"
          exit 1
        fi
        
        echo "ACTUAL_BRANCH=$ACTUAL_BRANCH" >> $GITHUB_ENV
        echo "✅ 源码克隆完成: $ACTUAL_BRANCH"

    - name: "🔧 源码初始化与优化"
      timeout-minutes: 20
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "初始化源码树..."
        
        echo "步骤1: 并行更新feeds..."
        ./scripts/feeds update -a &
        ./scripts/feeds update packages &
        ./scripts/feeds update luci &
        wait
        
        echo "步骤2: 安装feeds..."
        ./scripts/feeds install -a
        
        echo "✅ Feeds更新完成"

    - name: "🎨 应用配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        CONFIG_FILE="$GITHUB_WORKSPACE/firmware-config/${{ github.event.inputs.config_profile }}"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 配置文件不存在: $CONFIG_FILE"
          exit 1
        fi
        
        cp "$CONFIG_FILE" .config
        echo "✅ 配置应用完成"

    - name: "🔧 性能优化配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "应用性能优化配置..."
        
        # 禁用调试信息以加速编译
        sed -i 's/CONFIG_DEBUG=y/# CONFIG_DEBUG is not set/' .config 2>/dev/null || true
        sed -i 's/CONFIG_DEVEL=y/# CONFIG_DEVEL is not set/' .config 2>/dev/null || true
        sed -i 's/CONFIG_BUILD_LOG=y/# CONFIG_BUILD_LOG is not set/' .config 2>/dev/null || true
        
        # 启用ccache加速
        echo "CONFIG_CCACHE=y" >> .config
        
        yes "" | make oldconfig >/dev/null 2>&1 || true
        echo "✅ 性能优化配置完成"

    - name: "🛠️ 设置工具链策略"
      id: toolchain-setup
      run: |
        cd ${{ env.SOURCE_DIR }}
        
        STRATEGY="${{ github.event.inputs.toolchain_strategy }}"
        echo "工具链策略: $STRATEGY"
        
        # 使用更多线程编译工具链
        case $STRATEGY in
          "prebuilt")
            echo "🔧 使用预编译工具链..."
            if make tools/install toolchain/install -j$(nproc); then
              echo "✅ 预编译工具链安装成功"
              echo "result=prebuilt" >> $GITHUB_OUTPUT
            else
              echo "❌ 预编译工具链安装失败"
              echo "result=local" >> $GITHUB_OUTPUT
            fi
            ;;
          "local"|*)
            echo "🔧 使用本地编译工具链..."
            echo "result=local" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: "📦 处理预编译IPK包"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd ${{ env.SOURCE_DIR }}
        IPK_DIR="$GITHUB_WORKSPACE/firmware-config/custom-features/prebuilt-ipks"
        
        if [ -d "$IPK_DIR" ]; then
          IPK_FILES=$(find "$IPK_DIR" -name "*.ipk" -type f)
          if [ -n "$IPK_FILES" ]; then
            mkdir -p package/base-files/files/usr/lib/opkg/custom
            for ipk in $IPK_FILES; do
              echo "📥 复制IPK包: $(basename "$ipk")"
              cp "$ipk" package/base-files/files/usr/lib/opkg/custom/
            done
            echo "✅ 预编译IPK包处理完成"
          fi
        fi

    - name: "🛠️ 执行自定义脚本"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd ${{ env.SOURCE_DIR }}
        SCRIPTS_DIR="$GITHUB_WORKSPACE/firmware-config/custom-features/scripts"
        
        if [ -d "$SCRIPTS_DIR" ]; then
          for script in $(find "$SCRIPTS_DIR" -name "*.sh" -type f | sort); do
            echo "执行脚本: $(basename "$script")"
            chmod +x "$script"
            bash "$script" || exit 1
          done
        fi

    - name: "🔍 验证配置"
      run: |
        cd ${{ env.SOURCE_DIR }}
        make defconfig >/dev/null 2>&1
        echo "✅ 配置验证完成"

    - name: "🏗️ 高性能编译固件"
      timeout-minutes: 120
      run: |
        cd ${{ env.SOURCE_DIR }}
        export TERM=linux
        export FORCE_UNSAFE_CONFIGURE=1
        
        # 设置性能优化环境
        export CCACHE_DIR="/mnt/ccache"
        export CCACHE_SLOPPINESS=file_macro,include_file_mtime,include_file_ctime,time_macros
        export CCACHE_MAXSIZE=5G
        
        # 获取CPU核心数
        CPU_CORES=$(nproc)
        echo "💻 可用CPU核心数: $CPU_CORES"
        
        START_TIME=$(date +%s)
        
        echo "🚀 开始高性能编译..."
        echo "📊 编译参数:"
        echo "  - 工具链策略: ${{ steps.toolchain-setup.outputs.result }}"
        echo "  - 编译优化: ${{ github.event.inputs.build_optimization }}"
        echo "  - 自定义功能: ${{ github.event.inputs.enable_custom_features }}"
        echo "  - 实际分支: ${{ env.ACTUAL_BRANCH }}"
        echo "  - CPU核心: $CPU_CORES"
        echo "  - 工作目录: ${{ env.SOURCE_DIR }}"
        echo "  - CCACHE: 已启用 (5GB缓存)"
        
        # 高性能编译策略
        case "${{ github.event.inputs.build_optimization }}" in
          "speed")
            echo "🚀 极速模式: 使用 $CPU_CORES 线程 + 无详细输出"
            # 使用所有CPU核心，不输出详细日志
            if make -j$CPU_CORES CC="ccache gcc" CXX="ccache g++"; then
              echo "✅ 极速编译成功!"
            else
              echo "⚠️ 极速模式失败，尝试标准模式..."
              make -j$((CPU_CORES - 1)) V=s
            fi
            ;;
          "stability")
            echo "🛡️ 稳定模式: 使用 $((CPU_CORES - 1)) 线程 + 详细输出"
            make -j$((CPU_CORES - 1)) V=s CC="ccache gcc" CXX="ccache g++"
            ;;
          "balanced"|*)
            echo "⚖️ 平衡模式: 使用 $CPU_CORES 线程 + 基础输出"
            make -j$CPU_CORES CC="ccache gcc" CXX="ccache g++"
            ;;
        esac
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV
        
        # 显示ccache统计
        echo "📊 CCache 统计:"
        ccache -s
        
        echo "✅ 编译完成! 耗时: ${DURATION}秒 ($(($DURATION/60))分钟)"

    - name: "📦 收集构建产物"
      if: success()
      run: |
        cd ${{ env.SOURCE_DIR }}
        echo "收集编译产物..."
        
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        
        # 查找并复制固件文件
        find bin/targets -type f \( -name "*.bin" -o -name "*.img" -o -name "*.trx" -o -name "*.gz" \) -exec cp --parents {} ${{ env.ARTIFACTS_DIR }}/ \; 2>/dev/null || true
        
        # 复制到工作目录
        mkdir -p $GITHUB_WORKSPACE/artifacts
        cp -r ${{ env.ARTIFACTS_DIR }}/* $GITHUB_WORKSPACE/artifacts/ 2>/dev/null || true
        
        echo "✅ 产物收集完成"

    - name: "🧹 安全清理环境"
      if: always()
      run: |
        echo "安全清理编译环境..."
        # 先禁用交换文件再删除
        sudo swapoff /mnt/swapfile 2>/dev/null || true
        sudo rm -rf ${{ env.SOURCE_DIR }} ${{ env.ARTIFACTS_DIR }} /mnt/ccache /mnt/swapfile 2>/dev/null || true
        echo "✅ 环境清理完成"

    - name: "💾 上传构建产物"
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}-${{ env.ACTUAL_BRANCH }}"
        path: artifacts
        retention-days: 30

    - name: "📊 性能报告"
      if: always()
      run: |
        echo "=== 高性能编译报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "分支: ${{ env.ACTUAL_BRANCH }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 构建成功!"
          echo "⏱️ 编译时长: ${{ env.BUILD_DURATION }}秒"
          echo "⚡ 性能特性:"
          echo "  - 使用 /mnt 分区 (66G 空间)"
          echo "  - 8GB 交换文件"
          echo "  - CCache 编译缓存"
          echo "  - 多线程并行编译"
          echo "  - 性能优化配置"
        else
          echo "❌ 构建失败"
        fi
