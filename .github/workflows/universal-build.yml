name: "Universal Firmware Builder"

on:
  workflow_dispatch:
    inputs:
      # 源码库选择 - 支持主流OpenWrt分支
      source_preset:
        description: '选择源码库 (ImmortalWrt功能丰富/OpenWrt官方纯净/LEDE集成度高)'
        required: true
        type: choice
        options:
          - immortalwrt
          - openwrt
          - lede
        default: 'immortalwrt'
      
      # 分支选择 - 支持自动推荐或手动指定
      source_branch:
        description: '源码分支 (auto=自动推荐稳定分支，或手动指定分支名)'
        required: true
        default: 'auto'
        type: string
        
      # 设备配置文件 - 用户需要查看configs-list.md获取可用选项
      config_profile:
        description: '设备配置文件路径 - 查看 firmware-config/configs-list.md 获取可用文件列表'
        required: true
        type: string
        default: 'configs/.config_rt-ac42u_immortalwrt'
      
      # 自定义功能开关 - 启用额外的脚本和IPK包
      enable_custom_features:
        description: '启用自定义功能 (自定义脚本和预编译IPK包)'
        required: false
        default: true
        type: boolean

# 环境变量 - 配置构建环境
env:
  TZ: "Asia/Shanghai"                    # 设置时区为中国标准时间
  BUILD_TIMEOUT: 180                     # 构建超时时间（分钟）

jobs:
  build:
    runs-on: ubuntu-22.04                # 使用Ubuntu 22.04作为构建环境
    
    steps:
    # ======================
    # 阶段1：环境准备和配置解析
    # ======================
    
    # 步骤1: 检出配置仓库到firmware-config目录
    - name: "📥 检出配置仓库"
      uses: actions/checkout@v4
      with:
        path: firmware-config            # 配置文件的存储路径

    # 步骤2: 解析源码库配置，获取URL和分支信息
    - name: "🔧 解析源码配置"
      id: source-config
      run: |
        cd firmware-config
        echo "正在读取源码库配置..."
        
        # 检查repositories.json文件是否存在
        if [ ! -f "repositories.json" ]; then
          echo "❌ 错误: repositories.json 文件不存在"
          exit 1
        fi
        
        PRESET="${{ github.event.inputs.source_preset }}"
        
        # 从repositories.json中提取源码URL和描述
        SOURCE_URL=$(jq -r ".repositories.$PRESET.url // empty" repositories.json)
        DESCRIPTION=$(jq -r ".repositories.$PRESET.description // empty" repositories.json)
        
        # 分支处理逻辑：auto模式使用推荐分支，否则使用用户指定分支
        BRANCH="${{ github.event.inputs.source_branch }}"
        if [ "$BRANCH" = "auto" ]; then
          BRANCH=$(jq -r ".repositories.$PRESET.recommended_branch // \"main\"" repositories.json)
          echo "自动选择推荐分支: $BRANCH"
        fi
        
        # 验证配置数据是否有效
        if [ -z "$SOURCE_URL" ]; then
          echo "❌ 错误: 无法从repositories.json获取源码URL，请检查$PRESET配置"
          exit 1
        fi
        
        if [ -z "$BRANCH" ]; then
          echo "❌ 错误: 无法获取源码分支"
          exit 1
        fi
        
        echo "✅ 源码库: $PRESET - $DESCRIPTION"
        echo "✅ 仓库URL: $SOURCE_URL"
        echo "✅ 使用分支: $BRANCH"
        
        # 设置环境变量供后续步骤使用
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV

    # 步骤3: 安装编译所需的依赖包
    - name: "🧹 准备构建环境"
      run: |
        echo "安装编译依赖包..."
        sudo apt-get update
        # 安装OpenWrt编译所需的核心依赖
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip \
          python3-serial python3-setuptools rsync unzip zlib1g-dev file wget \
          jq

    # ======================
    # 阶段2：源码获取和初始化
    # ======================
    
    # 步骤4: 克隆源代码仓库
    - name: "📥 获取源代码"
      run: |
        echo "正在克隆源码仓库: ${{ env.SOURCE_URL }}"
        echo "使用分支: ${{ env.SOURCE_BRANCH }}"
        # 使用depth=1加快克隆速度，只获取最新commit
        git clone --depth 1 \
          --branch "${{ env.SOURCE_BRANCH }}" \
          "${{ env.SOURCE_URL }}" \
          source

    # 步骤5: 初始化源码，更新feeds
    - name: "🔧 源码初始化"
      run: |
        cd source
        echo "初始化源码树..."
        
        # 更新和安装feeds（软件包源）
        if [ -f "feeds.conf" ] || [ -f "feeds.conf.default" ]; then
          ./scripts/feeds update -a    # 更新所有feeds
          ./scripts/feeds install -a   # 安装所有feeds中的包
          echo "✅ Feeds更新完成"
        else
          echo "ℹ️ 未找到feeds配置文件，跳过feeds更新"
        fi

    # ======================
    # 阶段3：配置应用和自定义功能
    # ======================
    
    # 步骤6: 应用设备配置文件
    - name: "🎨 应用自定义配置"
      run: |
        cd source
        # 构建完整的配置文件路径
        CONFIG_FILE="../firmware-config/${{ github.event.inputs.config_profile }}"
        echo "正在应用配置文件: $CONFIG_FILE"
        
        # 检查配置文件是否存在
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ 错误: 配置文件不存在: $CONFIG_FILE"
          echo "💡 请查看 firmware-config/configs-list.md 获取可用配置文件列表"
          exit 1
        fi
        
        # 复制配置文件到源码根目录
        cp "$CONFIG_FILE" .config
        echo "✅ 配置文件应用完成: ${{ github.event.inputs.config_profile }}"

    # 步骤7: 执行自定义脚本（条件执行）
    - name: "🛠️ 执行自定义脚本"
      if: github.event.inputs.enable_custom_features == 'true'
      run: |
        cd source
        SCRIPTS_DIR="../firmware-config/custom-features/scripts"
        
        # 检查脚本目录是否存在
        if [ ! -d "$SCRIPTS_DIR" ]; then
          echo "ℹ️ 自定义脚本目录不存在: $SCRIPTS_DIR"
          exit 0
        fi
        
        # 查找所有.sh脚本文件并按名称排序
        SCRIPTS=$(find "$SCRIPTS_DIR" -name "*.sh" -type f | sort)
        
        if [ -z "$SCRIPTS" ]; then
          echo "ℹ️ 未找到任何脚本文件"
          exit 0
        fi
        
        echo "找到以下脚本文件:"
        echo "$SCRIPTS"
        
        # 逐个执行所有脚本
        for script in $SCRIPTS; do
          echo "执行脚本: $(basename "$script")"
          chmod +x "$script"  # 添加执行权限
          if bash "$script"; then
            echo "✅ $(basename "$script") 执行成功"
          else
            echo "❌ $(basename "$script") 执行失败"
            exit 1
          fi
        done
        
        echo "✅ 所有自定义脚本执行完成"

    # ======================
    # 阶段4：编译过程
    # ======================
    
    # 步骤8: 编译固件（设置超时防止无限等待）
    - name: "🏗️ 编译固件"
      timeout-minutes: ${{ env.BUILD_TIMEOUT }}
      run: |
        cd source
        
        # 计算并行编译任务数（CPU核心数-1）
        BUILD_JOBS=$(( $(nproc) - 1 ))
        [ $BUILD_JOBS -lt 1 ] && BUILD_JOBS=1
        echo "使用并行任务数: $BUILD_JOBS"
        
        START_TIME=$(date +%s)  # 记录开始时间
        
        echo "开始编译过程..."
        # 编译步骤：配置 -> 下载源码 -> 编译
        make defconfig
        make download -j${BUILD_JOBS} || make download -j1 V=s  # 失败时使用单线程详细模式
        make -j${BUILD_JOBS} || make -j1 V=s                   # 失败时使用单线程详细模式
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "✅ 编译完成! 耗时: ${DURATION}秒"
        
        # 保存编译时长供后续步骤使用
        echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

    # ======================
    # 阶段5：输出处理和产物收集
    # ======================
    
    # 步骤9: 收集编译生成的固件文件
    - name: "📦 收集构建产物"
      run: |
        cd source
        echo "收集编译输出文件..."
        
        # 查找固件文件（支持多种格式）
        FIRMWARE_FILES=$(find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" 2>/dev/null | head -10)
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "生成的固件文件:"
          echo "$FIRMWARE_FILES"
        else
          echo "⚠️ 未找到标准固件文件，检查编译输出目录"
          # 列出bin目录内容用于调试
          find bin/ -type f 2>/dev/null | head -20 || echo "bin目录不存在"
        fi
        
        # 准备产物目录
        mkdir -p ../artifacts
        # 复制目标文件到产物目录
        cp -r bin/targets/* ../artifacts/ 2>/dev/null || true

        # 创建构建信息文件
        echo "源码: ${{ env.SOURCE_URL }}" > ../artifacts/build-info.txt
        echo "分支: ${{ env.SOURCE_BRANCH }}" >> ../artifacts/build-info.txt
        echo "配置: ${{ github.event.inputs.config_profile }}" >> ../artifacts/build-info.txt
        echo "时间: $(date)" >> ../artifacts/build-info.txt
        echo "时长: ${{ env.BUILD_DURATION }}秒" >> ../artifacts/build-info.txt
        echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}" >> ../artifacts/build-info.txt

    # 步骤10: 上传构建产物到GitHub Artifacts
    - name: "💾 上传构建产物"
      uses: actions/upload-artifact@v4
      with:
        name: "Firmware-${{ github.run_number }}"  # 产物名称包含运行编号
        path: artifacts/                           # 上传整个artifacts目录
        retention-days: 30                         # 产物保留30天

    # 步骤11: 生成构建报告（无论成功失败都会执行）
    - name: "📊 构建报告"
      if: always()  # 无论构建成功失败都会执行
      run: |
        echo "=== 构建报告 ==="
        echo "状态: ${{ job.status }}"
        echo "源码: ${{ env.SOURCE_URL }}"
        echo "分支: ${{ env.SOURCE_BRANCH }}"
        echo "配置: ${{ github.event.inputs.config_profile }}"
        echo "自定义功能: ${{ github.event.inputs.enable_custom_features }}"
        
        # 根据构建状态显示不同消息
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 构建成功! 固件已上传到Artifacts"
          echo "⏱️ 编译时长: ${{ env.BUILD_DURATION }}秒"
        else
          echo "❌ 构建失败，请检查日志中的错误信息"
        fi
